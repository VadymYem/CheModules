# requires: pydub speechRecognition moviepy telethon requests google-generativeai pillow

from io import BytesIO
import os
import tempfile
import logging
import base64
import asyncio # –î–æ–¥–∞–Ω–æ –¥–ª—è asyncio.sleep

import speech_recognition as srec
from pydub import AudioSegment as auds
from moviepy.editor import VideoFileClip # AudioFileClip –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É, pydub –∫—Ä–∞—â–µ
from telethon.tl.types import (
    DocumentAttributeVideo,
    Message,
    DocumentAttributeAudio, # <-- –Ü–º–ø–æ—Ä—Ç –¥–æ–¥–∞–Ω–æ
)
import requests
try:
    import google.generativeai as genai
    GEMINI_AVAILABLE = True
except ImportError:
    GEMINI_AVAILABLE = False

from .. import loader, utils

logger = logging.getLogger(__name__)

# –§–æ—Ä–º–∞—Ç –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∞–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:
# { chat_id: {"engine": "google" | "whisper" | "gemini", "lang": "uk-UA" | "ru-RU" | "en-US" | None}, ... }
KEY_AUTO_RECOG = "auto_recognition_chats"

@loader.tds
class AuthorVttModEnhanced(loader.Module):
    """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É —á–µ—Ä–µ–∑ Google Recognition, Whisper (HF) —Ç–∞ Gemini (AI Studio) –∑ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–æ–º"""
    strings = {
        "name": "Enhanced Voice-to-text",
        "pref": "<b>[Enhanced VTT]</b> ",
        "processing": "‚è≥ Processing...",
        "downloading": "üì• Downloading...",
        "recognizing": "üó£Ô∏è Recognizing...",
        "recognized": "üí¨ <b>Recognized:</b>\n<i>{}</i>",
        "no_reply": "ü´† Reply to audio/voice/video message.",
        "audio_extract_error": "üö´ Error extracting audio from video.",
        "conversion_error": "üö´ Error converting audio.",
        "recognition_error": "üö´ <b>Recognition Error!</b> Possible issues with API or language detection.",
        "api_error": "üö´ <b>API Error ({source}):</b> {error}",
        "too_big": "ü´• <b>Media file is too large or too long for recognition.</b> (Max duration/size limits apply)",
        "google_lang": "Google ({})",
        "whisper": "Whisper (auto-lang)",
        "gemini": "Gemini (auto-lang)",

        "auto_on": "‚úÖ <b>Automatic recognition ({engine}) enabled in this chat.</b>",
        "auto_off": "‚õîÔ∏è <b>Automatic recognition disabled in this chat.</b>",

        # Config Help
        "cfg_hf_key": "Hugging Face API Token. Get from https://huggingface.co/settings/tokens",
        "cfg_gemini_key": "Google AI Studio (Gemini) API Key. Get from https://aistudio.google.com/app/apikey",
        "cfg_ignore_users": "List of user IDs to ignore for auto-recognition.",
        "cfg_silent": "Silent mode for auto-recognition errors (no error messages).",
        "cfg_max_duration_voice": "Max duration (seconds) for voice/audio auto-recognition.",
        "cfg_max_duration_video": "Max duration (seconds) for video auto-recognition.",
        "cfg_max_size_mb": "Max file size (MB) for auto-recognition.",

        # API Key missing errors
        "hf_token_missing": (
            "<b><emoji document_id=5980953710157632545>‚ùå</emoji>Missing Hugging Face API token.</b>\n"
            "Configure it using <code>.config</code> command.\n"
            "<i>See <code>.hfguide</code> for instructions.</i>"
        ),
        "gemini_token_missing": (
            "<b><emoji document_id=5980953710157632545>‚ùå</emoji>Missing Google AI (Gemini) API token.</b>\n"
            "Configure it using <code>.config</code> command.\n"
            "<i>See <code>.geminiguide</code> for instructions.</i>"
        ),
         "gemini_lib_missing": (
            "<b><emoji document_id=5980953710157632545>‚ùå</emoji>Missing `google-generativeai` library.</b>\n"
            "Install it using <code>.pip install google-generativeai</code> and restart Hikka."
        ),

        # Guides
        "hf_instructions": (
            "<emoji document_id=5238154170174820439>üë©‚Äçüéì</emoji> <b>How to get Hugging Face API token:</b>\n"
            "<b>1. Open Hugging Face and sign in:</b> <a href=\"https://huggingface.co/\">huggingface.co</a> <emoji document_id=4904848288345228262>üë§</emoji>\n"
            "<b>2. Go to Settings ‚Üí Access Tokens:</b> <a href=\"https://huggingface.co/settings/tokens\">huggingface.co/settings/tokens</a> <emoji document_id=5222142557865128918>‚öôÔ∏è</emoji>\n"
            "<b>3. Click 'New Token'.</b> <emoji document_id=5431757929940273672>‚ûï</emoji>\n"
            "<b>4. Give it a name (e.g., 'hikka-vtt') and select Role 'read'.</b> <emoji document_id=5253952855185829086>‚öôÔ∏è</emoji>\n"
            "<b>5. Click 'Generate Token'.</b> <emoji document_id=5253652327734192243>‚ûï</emoji>\n"
            "<b>6. Copy the token.</b> <emoji document_id=4916036072560919511>‚úÖ</emoji>\n"
            "<b>7. Use <code>.config</code> in Hikka, find this module, and paste the token into 'Hf api key'.</b>"
        ),
        "gemini_instructions": (
            "<emoji document_id=5238154170174820439>üë©‚Äçüéì</emoji> <b>How to get Google AI (Gemini) API key:</b>\n"
            "<b>1. Open Google AI Studio:</b> <a href=\"https://aistudio.google.com/app/apikey\">aistudio.google.com/app/apikey</a> <emoji document_id=4904848288345228262>üë§</emoji>\n"
            "<b>2. Sign in with your Google Account.</b>\n"
            "<b>3. Click 'Create API key in new project'.</b> <emoji document_id=5431757929940273672>‚ûï</emoji>\n"
            "<b>4. Copy the generated API key.</b> <emoji document_id=4916036072560919511>‚úÖ</emoji>\n"
            "<b>5. Use <code>.config</code> in Hikka, find this module, and paste the key into 'Gemini api key'.</b>"
        ),
    }
    # –î–æ–¥–∞—î–º–æ —Ä–æ—Å—ñ–π—Å—å–∫—ñ —Ä—è–¥–∫–∏ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
    strings_ru = {
        "_cls_doc": "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ Google Recognition, Whisper (HF) –∏ Gemini (AI Studio) —Å –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–æ–º",
        "pref": "<b>[Enhanced VTT]</b> ",
        "processing": "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...",
        "downloading": "üì• –ó–∞–≥—Ä—É–∑–∫–∞...",
        "recognizing": "üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...",
        "recognized": "üí¨ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:</b>\n<i>{}</i>",
        "no_reply": "ü´† –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∞—É–¥–∏–æ/–≥–æ–ª–æ—Å–æ–≤–æ–µ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        "recognition_error": "üö´ <b>–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!</b> –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å API –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞.",
        "api_error": "üö´ <b>–û—à–∏–±–∫–∞ API ({source}):</b> {error}",
        "too_big": "ü´• <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.</b> (–ü—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ª–∏–º–∏—Ç—ã –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å/—Ä–∞–∑–º–µ—Ä)",
        "google_lang": "Google ({})",
        "whisper": "Whisper (–∞–≤—Ç–æ-—è–∑—ã–∫)",
        "gemini": "Gemini (–∞–≤—Ç–æ-—è–∑—ã–∫)",
        "auto_on": "‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ({engine}) –≤–∫–ª—é—á–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.</b>",
        "auto_off": "‚õîÔ∏è <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.</b>",
        "hf_token_missing": "<b><emoji document_id=5980953710157632545>‚ùå</emoji>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-—Ç–æ–∫–µ–Ω Hugging Face.</b>\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ <code>.config</code>.\n<i>–°–º. <code>.hfguide</code> –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.</i>",
        "gemini_token_missing": "<b><emoji document_id=5980953710157632545>‚ùå</emoji>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á Google AI (Gemini).</b>\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ <code>.config</code>.\n<i>–°–º. <code>.geminiguide</code> –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.</i>",
        "gemini_lib_missing": "<b><emoji document_id=5980953710157632545>‚ùå</emoji>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ `google-generativeai`.</b>\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: <code>.pip install google-generativeai</code> –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Hikka.",
    }


    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "hf_api_key",
                None,
                lambda: self.strings("cfg_hf_key"),
                validator=loader.validators.Hidden(),
            ),
            loader.ConfigValue(
                "gemini_api_key",
                None,
                lambda: self.strings("cfg_gemini_key"),
                validator=loader.validators.Hidden(),
            ),
            loader.ConfigValue(
                "ignore_users",
                [],
                lambda: self.strings("cfg_ignore_users"),
                validator=loader.validators.Series(validator=loader.validators.TelegramID())
            ),
            loader.ConfigValue(
                "silent",
                False,
                lambda: self.strings("cfg_silent"),
                validator=loader.validators.Boolean()
            ),
             loader.ConfigValue(
                "max_duration_voice",
                300, # 5 —Ö–≤–∏–ª–∏–Ω –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                lambda: self.strings("cfg_max_duration_voice"),
                validator=loader.validators.Integer(minimum=10)
            ),
            loader.ConfigValue(
                "max_duration_video",
                120, # 2 —Ö–≤–∏–ª–∏–Ω–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                lambda: self.strings("cfg_max_duration_video"),
                validator=loader.validators.Integer(minimum=10)
            ),
            loader.ConfigValue(
                "max_size_mb",
                20, # 20 MB –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                lambda: self.strings("cfg_max_size_mb"),
                validator=loader.validators.Integer(minimum=1)
            ),
        )
        self._auto_recog_settings = {} # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç—É—Ç, –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ –≤ client_ready


    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
        self._auto_recog_settings = self.db.get(self.strings("name"), KEY_AUTO_RECOG, {})

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Gemini API –∫–ª—é—á–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ (—è–∫—â–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ —î)
        if GEMINI_AVAILABLE and self.config["gemini_api_key"]:
             try:
                 genai.configure(api_key=self.config["gemini_api_key"])
                 logger.info("Gemini API configured successfully.")
             except Exception as e:
                 logger.error(f"Failed to configure Gemini API: {e}")


    def _save_auto_recog_settings(self):
        """–ó–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≤ –ë–î"""
        self.db.set(self.strings("name"), KEY_AUTO_RECOG, self._auto_recog_settings)

    # --- –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—á—ñ ---

    async def _recognize_google(self, audio_path: str, lang: str) -> str:
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Google Speech Recognition (speech_recognition library)"""
        recog = srec.Recognizer()
        try:
            with srec.AudioFile(audio_path) as audio_file:
                audio_content = recog.record(audio_file)
            return await utils.run_sync(recog.recognize_google, audio_content, language=lang)
        except srec.UnknownValueError:
            raise ValueError("Google Speech Recognition could not understand audio")
        except srec.RequestError as e:
            raise ConnectionError(f"Could not request results from Google Speech Recognition service; {e}")
        except Exception as e:
            logger.exception("Google recognition error")
            raise e


    async def _recognize_whisper(self, audio_path: str) -> str:
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Whisper (Hugging Face API)"""
        if not self.config["hf_api_key"]:
            raise ValueError("hf_token_missing") # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª—é—á —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏

        api_url = "https://api-inference.huggingface.co/models/openai/whisper-large-v3" # –ú–æ–∂–Ω–∞ –æ–±—Ä–∞—Ç–∏ —ñ–Ω—à—É –º–æ–¥–µ–ª—å
        headers = {"Authorization": f"Bearer {self.config['hf_api_key']}"}

        try:
            with open(audio_path, "rb") as f:
                 audio_bytes = f.read()

            response = await utils.run_sync(
                requests.post,
                url=api_url,
                headers=headers,
                data=audio_bytes, # –ü–µ—Ä–µ–¥–∞—î–º–æ –±–∞–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É
                timeout=300 # –î–æ–¥–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–æ–≤–≥–∏—Ö —Ñ–∞–π–ª—ñ–≤
            )

            response.raise_for_status() # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ HTTP –ø–æ–º–∏–ª–∫–∏ (4xx, 5xx)
            result = response.json()

            if "text" in result:
                # –Ü–Ω–æ–¥—ñ API –ø–æ–≤–µ—Ä—Ç–∞—î leading/trailing –ø—Ä–æ–±—ñ–ª–∏
                return result["text"].strip() if result["text"] else ""
            elif "error" in result:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—É –ø–æ–º–∏–ª–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
                if "is currently loading" in result["error"]:
                     estimated_time = result.get("estimated_time", 20.0)
                     logger.warning(f"Whisper model is loading, estimated time: {estimated_time}s. Retrying might help.")
                     raise ConnectionError(f"Whisper model loading (est: {estimated_time:.1f}s). Please wait and try again.")
                raise RuntimeError(f"Whisper API error: {result['error']}")
            else:
                raise RuntimeError("Whisper API returned an unexpected response.")

        except requests.exceptions.Timeout:
             logger.error("Whisper API request timed out.")
             raise ConnectionError("Whisper API request timed out.")
        except requests.exceptions.RequestException as e:
            logger.exception("Whisper API request error")
            raise ConnectionError(f"Whisper API connection error: {e}")
        except Exception as e:
            logger.exception("Whisper recognition error")
            if isinstance(e, ValueError) and str(e) == "hf_token_missing":
                 raise e
            if isinstance(e, ConnectionError): # –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ ConnectionError –≤—ñ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
                 raise e
            raise RuntimeError(f"Whisper processing error: {e}")


    async def _recognize_gemini(self, audio_path: str, lang: str = None) -> str:
        """–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Gemini API (AI Studio)"""
        if not GEMINI_AVAILABLE:
             raise RuntimeError("gemini_lib_missing")
        if not self.config["gemini_api_key"]:
            raise ValueError("gemini_token_missing")

        audio_file = None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—É
        try:
            # 1. Configure API (–≤–∂–µ –∑—Ä–æ–±–ª–µ–Ω–æ –≤ client_ready, –∞–ª–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ –∑–∞–≤–∞–¥–∏—Ç—å)
            if not getattr(genai, '_client', None): # –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–ª—ñ—î–Ω—Ç
                genai.configure(api_key=self.config["gemini_api_key"])

            # 2. Upload file
            logger.info(f"Uploading {audio_path} to Gemini...")
            audio_file = await utils.run_sync(genai.upload_file, path=audio_path)
            logger.info(f"File uploaded: {audio_file.name}, starting state: {audio_file.state}")

            # –ß–µ–∫–∞—î–º–æ, –¥–æ–∫–∏ —Ñ–∞–π–ª –æ–±—Ä–æ–±–∏—Ç—å—Å—è (–∑ —Ç–∞–π–º–∞—É—Ç–æ–º)
            upload_timeout = 300 # 5 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–æ–±—Ä–æ–±–∫—É —Ñ–∞–π–ª—É
            start_time = asyncio.get_event_loop().time()
            while audio_file.state.name == "PROCESSING":
                if asyncio.get_event_loop().time() - start_time > upload_timeout:
                     raise TimeoutError(f"Gemini file upload/processing timed out after {upload_timeout}s")
                await asyncio.sleep(2) # –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –¥–æ–≤—à–µ –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª—É
                audio_file = await utils.run_sync(genai.get_file, name=audio_file.name)
                logger.debug(f"Gemini file state: {audio_file.state.name}")


            if audio_file.state.name == "FAILED":
                logger.error(f"Gemini file processing failed: {audio_file.state}")
                raise RuntimeError(f"Gemini file processing failed")
            if audio_file.state.name != "ACTIVE":
                 logger.error(f"Gemini file is not active, state: {audio_file.state.name}")
                 raise RuntimeError(f"Gemini file is not active, state: {audio_file.state.name}")

            # 3. Make the request
            model = genai.GenerativeModel(model_name="models/gemini-1.5-flash-latest")

            prompt = "Transcribe the audio file accurately."
            # –ú–æ–≤–∞ –∑–∞—Ä–∞–∑ –Ω–µ –¥–æ–¥–∞—î—Ç—å—Å—è, –±–æ Gemini 1.5 –¥–æ–±—Ä–µ –≤–∏–∑–Ω–∞—á–∞—î —ó—ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ

            logger.info("Sending request to Gemini model...")
            response = await utils.run_sync(
                 model.generate_content,
                 [prompt, audio_file],
                 request_options={"timeout": 300} # –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–∞–º–æ–≥–æ –∑–∞–ø–∏—Ç—É –¥–æ –º–æ–¥–µ–ª—ñ
            )
            logger.info("Received response from Gemini model.")

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            # Gemini API –º–æ–∂–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –º—ñ—Ä–∫—É–≤–∞–Ω—å –±–µ–∑–ø–µ–∫–∏
            if not response.candidates:
                 safety_feedback = getattr(response, 'prompt_feedback', 'Unknown safety block')
                 logger.warning(f"Gemini response blocked or empty. Feedback: {safety_feedback}")
                 raise RuntimeError(f"Gemini response blocked. Reason: {safety_feedback}")

            # –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç
            try:
                 recognized_text = response.text
            except ValueError as ve: # –ú–æ–∂–µ –≤–∏–Ω–∏–∫–Ω—É—Ç–∏, —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç—É
                 logger.warning(f"Gemini response has no text part: {ve}. Candidates: {response.candidates}")
                 raise RuntimeError(f"Gemini response has no text part: {ve}")

            return recognized_text.strip() if recognized_text else ""

        except TimeoutError as e: # –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ —Ç–∞–π–º–∞—É—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
             logger.error(str(e))
             raise ConnectionError(str(e))
        except Exception as e:
            logger.exception("Gemini recognition error")
            if isinstance(e, (ValueError, RuntimeError)) and str(e) in ["gemini_token_missing", "gemini_lib_missing"]:
                raise e
            if isinstance(e, ConnectionError): # –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ —ñ–Ω—à—ñ ConnectionError
                 raise e
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—á–∏—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª, —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —ñ –≤–∏–Ω–∏–∫–ª–∞ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞
            if audio_file and hasattr(audio_file, 'name'):
                logger.info(f"Attempting to delete Gemini file {audio_file.name} after error...")
                try:
                    await utils.run_sync(genai.delete_file, name=audio_file.name)
                    logger.info(f"Deleted Gemini file {audio_file.name} after error.")
                except Exception as delete_err:
                    logger.warning(f"Could not delete Gemini file {audio_file.name} after error: {delete_err}")

            raise RuntimeError(f"Gemini processing error: {e}")
        finally:
             # –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
             if audio_file and hasattr(audio_file, 'name') and audio_file.state.name == "ACTIVE":
                 logger.info(f"Attempting to delete Gemini file {audio_file.name} after successful recognition...")
                 try:
                     await utils.run_sync(genai.delete_file, name=audio_file.name)
                     logger.info(f"Deleted Gemini file: {audio_file.name}")
                 except Exception as delete_err:
                     logger.warning(f"Could not delete Gemini file {audio_file.name}: {delete_err}")


    # --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ ---

    async def _process_media(self, message: Message, engine: str, lang: str = None) -> str:
        """
        –ó–∞–≥–∞–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è, –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó —Ç–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞.
        –ü–æ–≤–µ—Ä—Ç–∞—î —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –∞–±–æ –≤–∏–∫–ª–∏–∫–∞—î –≤–∏–Ω—è—Ç–æ–∫.
        """
        reply = await message.get_reply_message()
        target_message = reply or message

        if not target_message or not target_message.media or \
           (target_message.file.mime_type.split("/")[0] not in ["audio", "video"]):
            raise ValueError("no_reply")

        is_video = target_message.video is not None
        duration = 0
        size_mb = (target_message.file.size or 0) / 1024 / 1024

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ (–±–µ–∑–ø–µ—á–Ω–æ)
        try:
            if is_video:
                 video_attrs = next((attr for attr in target_message.video.attributes if isinstance(attr, DocumentAttributeVideo)), None)
                 if video_attrs: duration = video_attrs.duration
                 max_duration = self.config["max_duration_video"]
            else: # audio or voice
                 if target_message.document and target_message.document.attributes:
                     audio_attrs = next((attr for attr in target_message.document.attributes if isinstance(attr, DocumentAttributeAudio)), None) # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∞–º–µ DocumentAttributeAudio
                     if audio_attrs: duration = audio_attrs.duration
                 max_duration = self.config["max_duration_voice"]
        except Exception as e:
             logger.warning(f"Could not get media duration/attributes: {e}")
             max_duration = self.config["max_duration_voice"] # fallback

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—ñ–≤
        if (duration and duration > max_duration) or \
           (size_mb and size_mb > self.config["max_size_mb"]):
             logger.warning(f"Media too large/long: duration={duration}s (max={max_duration}s), size={size_mb:.2f}MB (max={self.config['max_size_mb']}MB)")
             raise ValueError("too_big")


        status_msg = await utils.answer(message, self.strings("downloading"))

        temp_dir = tempfile.mkdtemp()
        original_media_path = None
        wav_audio_path = None
        media_name = target_message.file.name or f"media_{target_message.id}.{target_message.file.ext or 'file'}"


        try:
            original_media_path = await target_message.download_media(file=os.path.join(temp_dir, media_name))
            await utils.answer(status_msg, self.strings("processing"))

            # --- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ WAV (–¥–ª—è Google —ñ —è–∫ fallback) ---
            wav_audio_path = os.path.join(temp_dir, "audio.wav")
            audio_source_path_for_api = None # –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –≤ API

            try:
                if is_video:
                    logger.debug(f"Extracting audio from video: {original_media_path}")
                    with VideoFileClip(original_media_path) as video:
                         if video.audio is None:
                              raise ValueError("Video has no audio track.")
                         await utils.run_sync(video.audio.write_audiofile, wav_audio_path, codec="pcm_s16le", logger=None) # logger=None —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–ø–∞–º—É –≤—ñ–¥ moviepy
                    audio_source_path_for_api = wav_audio_path
                else:
                    # –î–ª—è Whisper/Gemini —Å–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª, —è–∫—â–æ —Ü–µ –º–æ–∂–ª–∏–≤–æ
                    # Google –ø–æ—Ç—Ä–µ–±—É—î WAV
                    if engine == "google":
                        logger.debug(f"Converting audio to WAV for Google: {original_media_path}")
                        audio_segment = await utils.run_sync(auds.from_file, original_media_path)
                        await utils.run_sync(audio_segment.export, wav_audio_path, format="wav")
                        audio_source_path_for_api = wav_audio_path
                    else:
                         # –î–ª—è Whisper/Gemini –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
                         logger.debug(f"Using original audio file for {engine}: {original_media_path}")
                         audio_source_path_for_api = original_media_path

                if not audio_source_path_for_api:
                     raise RuntimeError("Could not determine audio source path for API.")

                logger.info(f"Prepared audio for {engine}: {audio_source_path_for_api}")

            except Exception as conv_err:
                logger.exception("Audio conversion/extraction failed")
                # –°–ø—Ä–æ–±—É—î–º–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ WAV —è–∫ fallback, —è–∫—â–æ —â–µ –Ω–µ –∑—Ä–æ–±–ª–µ–Ω–æ
                if engine != "google" and not os.path.exists(wav_audio_path):
                     try:
                         logger.warning("Falling back to WAV conversion for non-Google engine.")
                         audio_segment = await utils.run_sync(auds.from_file, original_media_path)
                         await utils.run_sync(audio_segment.export, wav_audio_path, format="wav")
                         audio_source_path_for_api = wav_audio_path
                         logger.info(f"Fallback WAV conversion successful: {wav_audio_path}")
                     except Exception as fallback_err:
                          logger.error(f"Fallback WAV conversion also failed: {fallback_err}")
                          raise IOError(f"{self.strings('conversion_error')}: {conv_err}") from conv_err
                else:
                     raise IOError(f"{self.strings('conversion_error')}: {conv_err}") from conv_err


            await utils.answer(status_msg, self.strings("recognizing"))

            # --- –í–∏–∫–ª–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—á–∞ ---
            recognized_text = ""
            if engine == "google":
                if not lang: raise ValueError("Language code required for Google engine")
                recognized_text = await self._recognize_google(audio_source_path_for_api, lang)
            elif engine == "whisper":
                recognized_text = await self._recognize_whisper(audio_source_path_for_api)
            elif engine == "gemini":
                 if not GEMINI_AVAILABLE: raise RuntimeError("gemini_lib_missing")
                 recognized_text = await self._recognize_gemini(audio_source_path_for_api, lang)
            else:
                raise ValueError(f"Unknown recognition engine: {engine}")

            # –£—Å–ø—ñ—Ö - –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ–∫—Å—Ç
            await status_msg.delete()
            return recognized_text

        except (ValueError, RuntimeError, IOError, ConnectionError) as e:
            # –û–±—Ä–æ–±–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫ (–≤–∫–ª—é—á–∞—é—á–∏ –ø–æ–º–∏–ª–∫–∏ API —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó)
            error_key = str(e)
            specific_error_msg = str(e)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫–ª—é—á –Ω–∞—à–æ—ó —Å—Ç—Ä–æ–∫–∏ –ø–æ–º–∏–ª–∫–∏
            is_known_error_key = error_key in self.strings

            if is_known_error_key:
                error_message = self.strings(error_key).format(error=specific_error_msg) # –§–æ—Ä–º–∞—Ç—É—î–º–æ, —è–∫—â–æ —î –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {error}
            elif isinstance(e, ConnectionError): # –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è/API
                source = "API"
                if "Whisper" in specific_error_msg: source = "Whisper API"
                elif "Google" in specific_error_msg: source = "Google API"
                elif "Gemini" in specific_error_msg: source = "Gemini API"
                error_message = self.strings("api_error").format(source=source, error=specific_error_msg)
            elif isinstance(e, IOError): # –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó/IO
                 error_message = specific_error_msg # –í–∂–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
            else: # –Ü–Ω—à—ñ RuntimeError/ValueError
                error_message = self.strings("recognition_error") + f" ({specific_error_msg})"

            logger.warning(f"Processing failed: {error_message}") # –õ–æ–≥—É—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

            try:
                 # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ message.edit –∑–∞–º—ñ—Å—Ç—å utils.answer –¥–ª—è —Å—Ç–∞—Ç—É—Å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                 await status_msg.edit(self.strings("pref") + error_message)
            except Exception: # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
                 await utils.answer(message, self.strings("pref") + error_message)

            raise # –ü—Ä–æ–∫–∏–¥–∞—î–º–æ –≤–∏–Ω—è—Ç–æ–∫ –¥–∞–ª—ñ

        finally:
            # --- –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ ---
            try:
                # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ —É —Ç–∏–º—á–∞—Å–æ–≤—ñ–π –ø–∞–ø—Ü—ñ
                for filename in os.listdir(temp_dir):
                     file_path = os.path.join(temp_dir, filename)
                     try:
                         if os.path.isfile(file_path) or os.path.islink(file_path):
                             os.unlink(file_path)
                     except Exception as delete_err:
                         logger.error(f"Failed to delete temp file {file_path}: {delete_err}")
                os.rmdir(temp_dir)
                logger.debug(f"Cleaned up temporary directory: {temp_dir}")
            except Exception as cleanup_err:
                logger.error(f"Failed to cleanup temp dir {temp_dir}: {cleanup_err}")


    # --- –ö–æ–º–∞–Ω–¥–∏ ---

    async def _handle_recognition_command(self, message: Message, engine: str, lang: str = None):
        """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥ —Ä—É—á–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è"""
        try:
            recognized_text = await self._process_media(message, engine, lang)
            engine_name = engine.capitalize()
            if engine == 'google' and lang:
                engine_name = self.strings('google_lang').format(lang)
            elif engine == 'whisper':
                engine_name = self.strings('whisper')
            elif engine == 'gemini':
                 engine_name = self.strings('gemini')

            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –±—É–≤ —Ä–µ–ø–ª–∞–π
            target_message = await message.get_reply_message() or message
            await target_message.reply(self.strings("recognized").format(recognized_text))

            # –Ø–∫—â–æ –æ–±—Ä–æ–±–ª—è–ª–∏ —Ä–µ–ø–ª–∞–π, –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏
            if await message.get_reply_message():
                 await message.delete()

        except Exception as e:
            # –ü–æ–º–∏–ª–∫–∏ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω—ñ —Ç–∞ –ø–æ–∫–∞–∑–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –≤ _process_media
            logger.debug(f"Recognition command failed: {e}")


    @loader.owner
    @loader.command(ru_doc=".av <—Ä–µ–ø–ª–∞–π> - –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∏–π (Google)")
    async def avcmd(self, message: Message):
        """Recognize Ukrainian (Google)"""
        await self._handle_recognition_command(message, "google", "uk-UA")

    @loader.owner
    @loader.command(ru_doc=".ar <—Ä–µ–ø–ª–∞–π> - –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä—É—Å—Å–∫–∏–π (Google)")
    async def arcmd(self, message: Message):
        """Recognize Russian (Google)"""
        await self._handle_recognition_command(message, "google", "ru-RU")

    @loader.owner
    @loader.command(ru_doc=".ae <—Ä–µ–ø–ª–∞–π> - –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (Google)")
    async def aecmd(self, message: Message):
        """Recognize English (Google)"""
        await self._handle_recognition_command(message, "google", "en-US")

    @loader.owner
    @loader.command(alias="aw", ru_doc=".aw <—Ä–µ–ø–ª–∞–π> - –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å (Whisper, –∞–≤—Ç–æ-—è–∑—ã–∫)")
    async def awhispercmd(self, message: Message):
        """Recognize speech (Whisper, auto-language)"""
        await self._handle_recognition_command(message, "whisper")

    @loader.owner
    @loader.command(alias="ag", ru_doc=".ag <—Ä–µ–ø–ª–∞–π> - –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å (Gemini, –∞–≤—Ç–æ-—è–∑—ã–∫)")
    async def ageminicmd(self, message: Message):
        """Recognize speech (Gemini, auto-language)"""
        await self._handle_recognition_command(message, "gemini")

    # --- –ö–æ–º–∞–Ω–¥–∞ –û–î–ù–û–†–ê–ó–û–í–û–ì–û —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Whisper ---
    # –¶—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–Ω—ñ—à–µ –≤–º–∏–∫–∞–ª–∞/–≤–∏–º–∏–∫–∞–ª–∞ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º, —Ç–µ–ø–µ—Ä —Ä–æ–±–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
    @loader.owner
    @loader.command(ru_doc=".autow <—Ä–µ–ø–ª–∞–π> - –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –û–î–ò–ù –†–ê–ó (Whisper, –∞–≤—Ç–æ-—è–∑—ã–∫)")
    async def autowcmd(self, message: Message):
        """Recognize speech ONE TIME (Whisper, auto-language)"""
        await self._handle_recognition_command(message, "whisper")


    # --- –ö–æ–º–∞–Ω–¥–∏ –¢–£–ú–ë–õ–ï–†–Ü–í –∞–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è ---

    async def _toggle_auto_recog(self, message: Message, engine: str, lang: str = None):
        """–í–º–∏–∫–∞—î/–≤–∏–º–∏–∫–∞—î –∞–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–ª—è —á–∞—Ç—É"""
        chat_id = utils.get_chat_id(message)
        chat_id_str = str(chat_id)
        current_setting = self._auto_recog_settings.get(chat_id_str)

        new_setting = {"engine": engine, "lang": lang}

        if current_setting == new_setting:
            # –í–∏–º–∏–∫–∞—î–º–æ, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–∫–µ —Å–∞–º–µ
            self._auto_recog_settings.pop(chat_id_str, None)
            self._save_auto_recog_settings()
            await utils.answer(message, self.strings("auto_off"))
        else:
             # –í–º–∏–∫–∞—î–º–æ –∞–±–æ –∑–º—ñ–Ω—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
             # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á—ñ–≤ API –ø–µ—Ä–µ–¥ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è–º
            if engine == "whisper" and not self.config["hf_api_key"]:
                 await utils.answer(message, self.strings("hf_token_missing"))
                 return
            if engine == "gemini":
                 if not GEMINI_AVAILABLE:
                      await utils.answer(message, self.strings("gemini_lib_missing"))
                      return
                 if not self.config["gemini_api_key"]:
                      await utils.answer(message, self.strings("gemini_token_missing"))
                      return

            self._auto_recog_settings[chat_id_str] = new_setting
            self._save_auto_recog_settings()

            engine_name = engine.capitalize()
            if engine == 'google' and lang:
                engine_name = self.strings('google_lang').format(lang)
            elif engine == 'whisper':
                engine_name = self.strings('whisper')
            elif engine == 'gemini':
                 engine_name = self.strings('gemini')

            await utils.answer(message, self.strings("auto_on").format(engine=engine_name))


    @loader.owner # –ê–±–æ @loader.unrestricted, —è–∫—â–æ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –≤—Å—ñ–º
    @loader.command(alias="autov", ru_doc="–í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ (Google) –≤ —á–∞—Ç–µ")
    async def autoukcmd(self, message: Message):
        """Toggle auto-recognition for Ukrainian (Google)"""
        await self._toggle_auto_recog(message, "google", "uk-UA")

    @loader.owner
    @loader.command(alias="autor", ru_doc="–í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ (Google) –≤ —á–∞—Ç–µ")
    async def autorucmd(self, message: Message):
        """Toggle auto-recognition for Russian (Google)"""
        await self._toggle_auto_recog(message, "google", "ru-RU")

    @loader.owner
    @loader.command(alias="autoe", ru_doc="–í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ (Google) –≤ —á–∞—Ç–µ")
    async def autoencmd(self, message: Message):
        """Toggle auto-recognition for English (Google)"""
        await self._toggle_auto_recog(message, "google", "en-US")

    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –í–í–Ü–ú–ö–ù–ï–ù–ù–Ø/–í–ò–ú–ö–ù–ï–ù–ù–Ø –∞–≤—Ç–æ-—Ä–µ–∂–∏–º—É Whisper
    @loader.owner
    @loader.command(alias="toggleautow", ru_doc="–í–∫–ª/–≤—ã–∫–ª –ê–í–¢–û-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (Whisper) –≤ —á–∞—Ç–µ")
    async def toggleautowhispcmd(self, message: Message):
        """Toggle AUTO-recognition (Whisper, auto-lang)"""
        await self._toggle_auto_recog(message, "whisper")

    @loader.owner
    @loader.command(alias="autog", ru_doc="–í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ-—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (Gemini) –≤ —á–∞—Ç–µ")
    async def autogemicmd(self, message: Message):
        """Toggle auto-recognition (Gemini, auto-lang)"""
        await self._toggle_auto_recog(message, "gemini")


    # --- Watcher ---

    @loader.watcher(only_media=True, no_cmd=True)
    async def watcher(self, message: Message):
        chat_id = utils.get_chat_id(message)
        settings = self._auto_recog_settings.get(str(chat_id))

        if not settings: # –ê–≤—Ç–æ-—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—É –º–µ–¥—ñ–∞ (–≥–æ–ª–æ—Å, –∞—É–¥—ñ–æ, –≤—ñ–¥–µ–æ –±–µ–∑ –∞–Ω—ñ–º–∞—Ü—ñ—ó)
        is_video = message.video is not None and not message.gif
        is_audio = message.audio is not None
        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:
        is_voice = message.voice is not None or \
                   (message.document and any(
                       isinstance(attr, DocumentAttributeAudio) and attr.voice
                       for attr in getattr(message.document, 'attributes', [])
                   ))

        if not (is_video or is_audio or is_voice):
            return # –ù–µ —î —Ü—ñ–ª—å–æ–≤–∏–º —Ç–∏–ø–æ–º –º–µ–¥—ñ–∞

        # –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        sender = await message.get_sender()
        if not sender or sender.bot or sender.is_self: # –Ü–≥–Ω–æ—Ä—É—î–º–æ –±–æ—Ç—ñ–≤ —Ç–∞ —Å–µ–±–µ
             return
        if message.sender_id in self.config["ignore_users"]:
            logger.debug(f"Ignoring message from user {message.sender_id} in chat {chat_id}")
            return

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è —Ü—å–æ–≥–æ —á–∞—Ç—É
        engine = settings["engine"]
        lang = settings["lang"] # –ú–æ–∂–µ –±—É—Ç–∏ None –¥–ª—è Whisper/Gemini

        logger.debug(f"Auto-recognition triggered for chat {chat_id} with engine {engine} (lang: {lang})")

        try:
            # _process_media —Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î —Å–∞–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            # –í–æ–Ω–∞ —Ç–∞–∫–æ–∂ –º—ñ—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–æ–∑–º—ñ—Ä—É/—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
            recognized_text = await self._process_media(message, engine, lang)

            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
            if recognized_text and recognized_text.strip():
                 await message.reply(self.strings("recognized").format(recognized_text))
            else:
                 logger.warning(f"Auto-recognition for chat {chat_id} resulted in empty text.")


        except ValueError as e:
            err_key = str(e)
            if err_key == "too_big" and not self.config["silent"]:
                 try: await message.reply(self.strings("pref") + self.strings("too_big"))
                 except Exception: pass
            elif err_key in self.strings and not self.config["silent"]:
                 try: await message.reply(self.strings("pref") + self.strings(err_key).format(error=str(e)))
                 except Exception: pass
            else:
                 logger.warning(f"Watcher value error in chat {chat_id}: {e}")

        except Exception as e:
            logger.exception(f"Auto-recognition watcher failed for chat {chat_id}")
            if not self.config["silent"]:
                 # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
                error_key = "recognition_error"
                error_message_fmt = self.strings(error_key)
                specific_error_msg = str(e)

                if isinstance(e, ConnectionError):
                     source = "API"
                     if "Whisper" in specific_error_msg: source = "Whisper API"
                     elif "Google" in specific_error_msg: source = "Google API"
                     elif "Gemini" in specific_error_msg: source = "Gemini API"
                     error_key = "api_error"
                     error_message_fmt = self.strings(error_key).format(source=source, error="{error}") # –ó–∞–ª–∏—à–∞—î–º–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
                elif str(e) in self.strings:
                     error_key = str(e)
                     error_message_fmt = self.strings(error_key) # –¢—É—Ç –º–æ–∂–µ –Ω–µ –±—É—Ç–∏ {error}

                # –§–æ—Ä–º–∞—Ç—É—î–º–æ, —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ, —ñ–Ω–∞–∫—à–µ –¥–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏ –≤ –¥—É–∂–∫–∞—Ö
                try:
                     final_error_message = error_message_fmt.format(error=specific_error_msg)
                except KeyError: # –Ø–∫—â–æ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–µ–º–∞—î {error}
                     final_error_message = error_message_fmt + f" ({specific_error_msg})"

                try:
                     await message.reply(self.strings("pref") + final_error_message)
                except Exception:
                     pass

    # --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ ---
    @loader.command(ru_doc="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞ Hugging Face")
    async def hfguide(self, message: Message):
        """Show Hugging Face token guide"""
        await utils.answer(message, self.strings('hf_instructions'))

    @loader.command(ru_doc="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é API –∫–ª—é—á–∞ Gemini")
    async def geminiguide(self, message: Message):
        """Show Google AI (Gemini) API key guide"""
        await utils.answer(message, self.strings('gemini_instructions'))