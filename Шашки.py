# meta developer: @author_che
# meta name: –®–∞—à–∫–∏ —Ç–∞ –®–∞—Ö–∏
# meta version: 2.0.0 # –î–æ–¥–∞–Ω–æ —à–∞—Ö–∏ —Ç–∞ —É–∫—Ä–∞—ó–Ω—ñ–∑–∞—Ü—ñ—è

import asyncio, html, random
from .. import loader, utils

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —à–∞—à–æ–∫
EMPTY = 0
WHITE_MAN = 1
BLACK_MAN = 2
WHITE_KING = 3
BLACK_KING = 4

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è —à–∞—Ö—ñ–≤
CHESS_EMPTY = 0
CHESS_W_KING = 11
CHESS_W_QUEEN = 12
CHESS_W_ROOK = 13
CHESS_W_BISHOP = 14
CHESS_W_KNIGHT = 15
CHESS_W_PAWN = 16
CHESS_B_KING = 21
CHESS_B_QUEEN = 22
CHESS_B_ROOK = 23
CHESS_B_BISHOP = 24
CHESS_B_KNIGHT = 25
CHESS_B_PAWN = 26

PIECE_EMOJIS = {
    EMPTY: ".",
    "light": " ",
    WHITE_MAN: "‚ö™",
    BLACK_MAN: "‚ö´",
    WHITE_KING: "üåù",
    BLACK_KING: "üåö",
    'selected': "üîò",
    'move_target': "üü¢",
    'capture_target': "üî¥",
    # –®–∞—Ö–æ–≤—ñ —Ñ—ñ–≥—É—Ä–∏
    CHESS_W_KING: "‚ôî",
    CHESS_W_QUEEN: "‚ôï",
    CHESS_W_ROOK: "‚ôñ",
    CHESS_W_BISHOP: "‚ôó",
    CHESS_W_KNIGHT: "‚ôò",
    CHESS_W_PAWN: "‚ôô",
    CHESS_B_KING: "‚ôö",
    CHESS_B_QUEEN: "‚ôõ",
    CHESS_B_ROOK: "‚ôú",
    CHESS_B_BISHOP: "‚ôù",
    CHESS_B_KNIGHT: "‚ôû",
    CHESS_B_PAWN: "‚ôü",
}

class CheckersBoard:
    def __init__(self, mandatory_captures_enabled=True):
        self._board = [[EMPTY for _ in range(8)] for _ in range(8)]
        self._setup_initial_pieces()
        self.current_player = "white"
        self.mandatory_capture_from_pos = None
        self.mandatory_captures_enabled = mandatory_captures_enabled

    def _setup_initial_pieces(self):
        for r in range(8):
            for c in range(8):
                if (r + c) % 2 != 0:
                    if r < 3:
                        self._board[r][c] = BLACK_MAN
                    elif r > 4:
                        self._board[r][c] = WHITE_MAN

    def _is_valid_coord(self, r, c):
        return 0 <= r < 8 and 0 <= c < 8

    def get_piece_at(self, r, c):
        if not self._is_valid_coord(r, c):
            return None
        return self._board[r][c]

    def _set_piece_at(self, r, c, piece):
        if self._is_valid_coord(r, c):
            self._board[r][c] = piece

    def _get_player_color(self, piece):
        if piece in [WHITE_MAN, WHITE_KING]:
            return "white"
        if piece in [BLACK_MAN, BLACK_KING]:
            return "black"
        return None

    def _get_opponent_color(self, color):
        return "black" if color == "white" else "white"

    def _get_moves_for_piece(self, r, c):
        moves = []
        piece = self.get_piece_at(r, c)
        player_color = self._get_player_color(piece)
        opponent_color = self._get_opponent_color(player_color)

        if piece == EMPTY:
            return []

        all_diagonal_directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
        
        if piece in [WHITE_MAN, BLACK_MAN]:
            regular_move_directions = []
            if piece == WHITE_MAN:
                regular_move_directions = [(-1, -1), (-1, 1)]
            elif piece == BLACK_MAN:
                regular_move_directions = [(1, -1), (1, 1)]

            for dr, dc in regular_move_directions:
                new_r, new_c = r + dr, c + dc
                if self._is_valid_coord(new_r, new_c) and self.get_piece_at(new_r, new_c) == EMPTY:
                    moves.append((r, c, new_r, new_c, False))

            for dr, dc in all_diagonal_directions:
                captured_piece_r, captured_piece_c = r + dr, c + dc
                jump_r, jump_c = r + 2 * dr, c + 2 * dc
                
                captured_piece = self.get_piece_at(captured_piece_r, captured_piece_c)

                if (self._is_valid_coord(jump_r, jump_c) and
                    self.get_piece_at(jump_r, jump_c) == EMPTY and
                    self._get_player_color(captured_piece) == opponent_color):
                    
                    moves.append((r, c, jump_r, jump_c, True))

        elif piece in [WHITE_KING, BLACK_KING]:
            for dr, dc in all_diagonal_directions:
                current_r, current_c = r + dr, c + dc
                captured_piece_pos = None

                while self._is_valid_coord(current_r, current_c):
                    piece_on_path = self.get_piece_at(current_r, current_c)
                    piece_on_path_color = self._get_player_color(piece_on_path)

                    if piece_on_path == EMPTY:
                        if captured_piece_pos is None:
                            moves.append((r, c, current_r, current_c, False))
                        else:
                            moves.append((r, c, current_r, current_c, True))
                    elif piece_on_path_color == player_color:
                        break
                    elif piece_on_path_color == opponent_color:
                        if captured_piece_pos is None:
                            captured_piece_pos = (current_r, current_c)
                        else:
                            break
                    
                    current_r += dr
                    current_c += dc
        return moves

    def get_all_possible_moves(self, player_color):
        all_moves = []
        all_captures = []

        if self.mandatory_capture_from_pos:
            r, c = self.mandatory_capture_from_pos
            return [m for m in self._get_moves_for_piece(r, c) if m[4]]
            
        for r in range(8):
            for c in range(8):
                piece = self.get_piece_at(r, c)
                if self._get_player_color(piece) == player_color:
                    moves_for_piece = self._get_moves_for_piece(r, c)
                    for move in moves_for_piece:
                        if move[4]:
                            all_captures.append(move)
                        else:
                            all_moves.append(move)
        
        if self.mandatory_captures_enabled and all_captures: 
            return all_captures
        
        return all_moves + all_captures

    def _execute_move(self, start_r, start_c, end_r, end_c, is_capture_move):
        piece = self.get_piece_at(start_r, start_c)
        self._set_piece_at(end_r, end_c, piece)
        self._set_piece_at(start_r, start_c, EMPTY)

        if is_capture_move:
            dr_diff = end_r - start_r
            dc_diff = end_c - start_c
            
            dr_norm = 0
            if dr_diff != 0:
                dr_norm = dr_diff // abs(dr_diff)
            
            dc_norm = 0
            if dc_diff != 0:
                dc_norm = dc_diff // abs(dc_diff)

            current_r, current_c = start_r + dr_norm, start_c + dc_norm
            while self._is_valid_coord(current_r, current_c) and (current_r, current_c) != (end_r, end_c):
                if self.get_piece_at(current_r, current_c) != EMPTY:
                    self._set_piece_at(current_r, current_c, EMPTY)
                    break
                current_r += dr_norm
                current_c += dc_norm
        
        return is_capture_move

    def make_move(self, start_r, start_c, end_r, end_c, is_capture_move):
        self._execute_move(start_r, start_c, end_r, end_c, is_capture_move)
        
        piece_after_move = self.get_piece_at(end_r, end_c)
        if piece_after_move == WHITE_MAN and end_r == 0:
            self._set_piece_at(end_r, end_c, WHITE_KING)
            piece_after_move = WHITE_KING
        elif piece_after_move == BLACK_MAN and end_r == 7:
            self._set_piece_at(end_r, end_c, BLACK_KING)
            piece_after_move = BLACK_KING

        if is_capture_move:
            self.mandatory_capture_from_pos = (end_r, end_c)
            further_captures = [m for m in self._get_moves_for_piece(end_r, end_c) if m[4]]
            
            if further_captures:
                return True
            else:
                self.mandatory_capture_from_pos = None
                self.switch_turn()
                return False
        else:
            self.mandatory_capture_from_pos = None
            self.switch_turn()
            return False

    def switch_turn(self):
        self.current_player = self._get_opponent_color(self.current_player)

    def is_game_over(self):
        white_pieces = sum(1 for r in range(8) for c in range(8) if self._get_player_color(self.get_piece_at(r, c)) == "white")
        black_pieces = sum(1 for r in range(8) for c in range(8) if self._get_player_color(self.get_piece_at(r, c)) == "black")

        if white_pieces == 0:
            return "–ü–µ—Ä–µ–º–æ–≥–∞ —á–æ—Ä–Ω–∏—Ö"
        if black_pieces == 0:
            return "–ü–µ—Ä–µ–º–æ–≥–∞ –±—ñ–ª–∏—Ö"
        
        if not self.get_all_possible_moves(self.current_player):
            if self.current_player == "white":
                return "–ü–µ—Ä–µ–º–æ–≥–∞ —á–æ—Ä–Ω–∏—Ö (–Ω–µ–º–∞—î —Ö–æ–¥—ñ–≤ —É –±—ñ–ª–∏—Ö)"
            else:
                return "–ü–µ—Ä–µ–º–æ–≥–∞ –±—ñ–ª–∏—Ö (–Ω–µ–º–∞—î —Ö–æ–¥—ñ–≤ —É —á–æ—Ä–Ω–∏—Ö)"

        return None

    def to_list_of_emojis(self, selected_pos=None, possible_moves_with_info=None):
        board_emojis = []
        possible_moves_with_info = possible_moves_with_info if possible_moves_with_info else []
        
        possible_move_targets_map = {(move_info[0], move_info[1]): move_info[2] for move_info in possible_moves_with_info}

        for r in range(8):
            row_emojis = []
            for c in range(8):
                piece = self.get_piece_at(r, c)
                current_cell_emoji = PIECE_EMOJIS['light'] if (r + c) % 2 == 0 else PIECE_EMOJIS[piece]
                
                if (r, c) == selected_pos:
                    current_cell_emoji = PIECE_EMOJIS['selected']
                elif (r, c) in possible_move_targets_map:
                    is_capture_move = possible_move_targets_map[(r, c)]
                    current_cell_emoji = PIECE_EMOJIS['capture_target'] if is_capture_move else PIECE_EMOJIS['move_target']
                
                row_emojis.append(current_cell_emoji)
            board_emojis.append(row_emojis)
        return board_emojis
    
    def get_valid_moves_for_selection(self, current_r, current_c):
        piece = self.get_piece_at(current_r, current_c)
        if self._get_player_color(piece) != self.current_player:
            return []

        piece_moves_full_info = self._get_moves_for_piece(current_r, current_c)
        all_game_moves_full_info = self.get_all_possible_moves(self.current_player)
        
        valid_moves_for_selection = []

        if self.mandatory_capture_from_pos:
            if (current_r, current_c) == self.mandatory_capture_from_pos:
                valid_moves_for_selection = [(e_r, e_c, is_cap) for s_r, s_c, e_r, e_c, is_cap in piece_moves_full_info if is_cap]
            else:
                valid_moves_for_selection = []
        else:
            for s_r, s_c, e_r, e_c, is_cap in piece_moves_full_info:
                if (s_r, s_c, e_r, e_c, is_cap) in all_game_moves_full_info:
                    valid_moves_for_selection.append((e_r, e_c, is_cap))

        return valid_moves_for_selection

class ChessBoard:
    def __init__(self):
        self._board = [[CHESS_EMPTY for _ in range(8)] for _ in range(8)]
        self._setup_initial_pieces()
        self.current_player = "white"
        self.white_king_moved = False
        self.black_king_moved = False
        self.white_rook_king_moved = False
        self.white_rook_queen_moved = False
        self.black_rook_king_moved = False
        self.black_rook_queen_moved = False
        self.en_passant_target = None

    def _setup_initial_pieces(self):
        # –ë—ñ–ª—ñ —Ñ—ñ–≥—É—Ä–∏
        self._board[7] = [CHESS_W_ROOK, CHESS_W_KNIGHT, CHESS_W_BISHOP, CHESS_W_QUEEN, 
                         CHESS_W_KING, CHESS_W_BISHOP, CHESS_W_KNIGHT, CHESS_W_ROOK]
        self._board[6] = [CHESS_W_PAWN] * 8
        
        # –ß–æ—Ä–Ω—ñ —Ñ—ñ–≥—É—Ä–∏
        self._board[0] = [CHESS_B_ROOK, CHESS_B_KNIGHT, CHESS_B_BISHOP, CHESS_B_QUEEN, 
                         CHESS_B_KING, CHESS_B_BISHOP, CHESS_B_KNIGHT, CHESS_B_ROOK]
        self._board[1] = [CHESS_B_PAWN] * 8

    def _is_valid_coord(self, r, c):
        return 0 <= r < 8 and 0 <= c < 8

    def get_piece_at(self, r, c):
        if not self._is_valid_coord(r, c):
            return None
        return self._board[r][c]

    def _set_piece_at(self, r, c, piece):
        if self._is_valid_coord(r, c):
            self._board[r][c] = piece

    def _get_player_color(self, piece):
        if 11 <= piece <= 16:
            return "white"
        if 21 <= piece <= 26:
            return "black"
        return None

    def _get_opponent_color(self, color):
        return "black" if color == "white" else "white"

    def _is_path_clear(self, start_r, start_c, end_r, end_c):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —à–ª—è—Ö –º—ñ–∂ –¥–≤–æ–º–∞ –∫–ª—ñ—Ç–∏–Ω–∞–º–∏ –≤—ñ–ª—å–Ω–∏–π"""
        dr = 0 if start_r == end_r else (1 if end_r > start_r else -1)
        dc = 0 if start_c == end_c else (1 if end_c > start_c else -1)
        
        r, c = start_r + dr, start_c + dc
        while (r, c) != (end_r, end_c):
            if self.get_piece_at(r, c) != CHESS_EMPTY:
                return False
            r += dr
            c += dc
        return True

    def _get_pawn_moves(self, r, c, piece):
        moves = []
        direction = -1 if piece == CHESS_W_PAWN else 1
        start_row = 6 if piece == CHESS_W_PAWN else 1
        
        # –†—É—Ö –≤–ø–µ—Ä–µ–¥ –Ω–∞ –æ–¥–Ω—É –∫–ª—ñ—Ç–∏–Ω–∫—É
        new_r = r + direction
        if self._is_valid_coord(new_r, c) and self.get_piece_at(new_r, c) == CHESS_EMPTY:
            moves.append((r, c, new_r, c, False))
            
            # –†—É—Ö –≤–ø–µ—Ä–µ–¥ –Ω–∞ –¥–≤—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
            if r == start_row and self.get_piece_at(new_r + direction, c) == CHESS_EMPTY:
                moves.append((r, c, new_r + direction, c, False))
        
        # –ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ
        for dc in [-1, 1]:
            new_r, new_c = r + direction, c + dc
            if self._is_valid_coord(new_r, new_c):
                target_piece = self.get_piece_at(new_r, new_c)
                if target_piece != CHESS_EMPTY and self._get_player_color(target_piece) != self._get_player_color(piece):
                    moves.append((r, c, new_r, new_c, True))
        
        return moves

    def _get_rook_moves(self, r, c):
        moves = []
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        for dr, dc in directions:
            for i in range(1, 8):
                new_r, new_c = r + i * dr, c + i * dc
                if not self._is_valid_coord(new_r, new_c):
                    break
                
                target_piece = self.get_piece_at(new_r, new_c)
                if target_piece == CHESS_EMPTY:
                    moves.append((r, c, new_r, new_c, False))
                else:
                    if self._get_player_color(target_piece) != self._get_player_color(self.get_piece_at(r, c)):
                        moves.append((r, c, new_r, new_c, True))
                    break
        
        return moves

    def _get_bishop_moves(self, r, c):
        moves = []
        directions = [(-1, -1), (-1, 1), (1, -1), (1, 1)]
        
        for dr, dc in directions:
            for i in range(1, 8):
                new_r, new_c = r + i * dr, c + i * dc
                if not self._is_valid_coord(new_r, new_c):
                    break
                
                target_piece = self.get_piece_at(new_r, new_c)
                if target_piece == CHESS_EMPTY:
                    moves.append((r, c, new_r, new_c, False))
                else:
                    if self._get_player_color(target_piece) != self._get_player_color(self.get_piece_at(r, c)):
                        moves.append((r, c, new_r, new_c, True))
                    break
        
        return moves

    def _get_knight_moves(self, r, c):
        moves = []
        knight_moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]
        
        for dr, dc in knight_moves:
            new_r, new_c = r + dr, c + dc
            if self._is_valid_coord(new_r, new_c):
                target_piece = self.get_piece_at(new_r, new_c)
                if target_piece == CHESS_EMPTY:
                    moves.append((r, c, new_r, new_c, False))
                elif self._get_player_color(target_piece) != self._get_player_color(self.get_piece_at(r, c)):
                    moves.append((r, c, new_r, new_c, True))
        
        return moves

    def _get_queen_moves(self, r, c):
        return self._get_rook_moves(r, c) + self._get_bishop_moves(r, c)

    def _get_king_moves(self, r, c):
        moves = []
        king_moves = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        
        for dr, dc in king_moves:
            new_r, new_c = r + dr, c + dc
            if self._is_valid_coord(new_r, new_c):
                target_piece = self.get_piece_at(new_r, new_c)
                if target_piece == CHESS_EMPTY:
                    moves.append((r, c, new_r, new_c, False))
                elif self._get_player_color(target_piece) != self._get_player_color(self.get_piece_at(r, c)):
                    moves.append((r, c, new_r, new_c, True))
        
        return moves

    def _get_moves_for_piece(self, r, c):
        piece = self.get_piece_at(r, c)
        if piece == CHESS_EMPTY:
            return []

        piece_type = piece % 10
        
        if piece_type == 6:  # –ü—ñ—à–∞–∫
            return self._get_pawn_moves(r, c, piece)
        elif piece_type == 3:  # –¢—É—Ä–∞
            return self._get_rook_moves(r, c)
        elif piece_type == 4:  # –°–ª–æ–Ω
            return self._get_bishop_moves(r, c)
        elif piece_type == 5:  # –ö—ñ–Ω—å
            return self._get_knight_moves(r, c)
        elif piece_type == 2:  # –§–µ—Ä–∑—å
            return self._get_queen_moves(r, c)
        elif piece_type == 1:  # –ö–æ—Ä–æ–ª—å
            return self._get_king_moves(r, c)
        
        return []

    def get_all_possible_moves(self, player_color):
        all_moves = []
        
        for r in range(8):
            for c in range(8):
                piece = self.get_piece_at(r, c)
                if self._get_player_color(piece) == player_color:
                    moves_for_piece = self._get_moves_for_piece(r, c)
                    all_moves.extend(moves_for_piece)
        
        return all_moves

    def make_move(self, start_r, start_c, end_r, end_c, is_capture_move):
        piece = self.get_piece_at(start_r, start_c)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–ª–∞–≥—ñ–≤ —Ä–æ–∫—ñ—Ä–æ–≤–∫–∏
        if piece == CHESS_W_KING:
            self.white_king_moved = True
        elif piece == CHESS_B_KING:
            self.black_king_moved = True
        elif piece == CHESS_W_ROOK:
            if start_c == 0:
                self.white_rook_queen_moved = True
            elif start_c == 7:
                self.white_rook_king_moved = True
        elif piece == CHESS_B_ROOK:
            if start_c == 0:
                self.black_rook_queen_moved = True
            elif start_c == 7:
                self.black_rook_king_moved = True

        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–æ–¥—É
        self._set_piece_at(end_r, end_c, piece)
        self._set_piece_at(start_r, start_c, CHESS_EMPTY)
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ—à–∞–∫–∞
        if piece == CHESS_W_PAWN and end_r == 0:
            self._set_piece_at(end_r, end_c, CHESS_W_QUEEN)
        elif piece == CHESS_B_PAWN and end_r == 7:
            self._set_piece_at(end_r, end_c, CHESS_B_QUEEN)

        self.switch_turn()
        return False

    def switch_turn(self):
        self.current_player = self._get_opponent_color(self.current_player)

    def is_game_over(self):
        # –°–ø—Ä–æ—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–Ω—Ü—è –≥—Ä–∏
        if not self.get_all_possible_moves(self.current_player):
            if self.current_player == "white":
                return "–ü–µ—Ä–µ–º–æ–≥–∞ —á–æ—Ä–Ω–∏—Ö (–Ω–µ–º–∞—î —Ö–æ–¥—ñ–≤ —É –±—ñ–ª–∏—Ö)"
            else:
                return "–ü–µ—Ä–µ–º–æ–≥–∞ –±—ñ–ª–∏—Ö (–Ω–µ–º–∞—î —Ö–æ–¥—ñ–≤ —É —á–æ—Ä–Ω–∏—Ö)"
        return None

    def to_list_of_emojis(self, selected_pos=None, possible_moves_with_info=None):
        board_emojis = []
        possible_moves_with_info = possible_moves_with_info if possible_moves_with_info else []
        
        possible_move_targets_map = {(move_info[0], move_info[1]): move_info[2] for move_info in possible_moves_with_info}

        for r in range(8):
            row_emojis = []
            for c in range(8):
                piece = self.get_piece_at(r, c)
                current_cell_emoji = PIECE_EMOJIS['light'] if (r + c) % 2 == 0 else PIECE_EMOJIS.get(piece, ".")
                
                if (r, c) == selected_pos:
                    current_cell_emoji = PIECE_EMOJIS['selected']
                elif (r, c) in possible_move_targets_map:
                    is_capture_move = possible_move_targets_map[(r, c)]
                    current_cell_emoji = PIECE_EMOJIS['capture_target'] if is_capture_move else PIECE_EMOJIS['move_target']
                
                row_emojis.append(current_cell_emoji)
            board_emojis.append(row_emojis)
        return board_emojis

    def get_valid_moves_for_selection(self, current_r, current_c):
        piece = self.get_piece_at(current_r, current_c)
        if self._get_player_color(piece) != self.current_player:
            return []

        moves = self._get_moves_for_piece(current_r, current_c)
        return [(e_r, e_c, is_cap) for s_r, s_c, e_r, e_c, is_cap in moves]


@loader.tds
class CheckersChess(loader.Module):
    """–®–∞—à–∫–∏ —Ç–∞ —à–∞—Ö–∏ –¥–ª—è –≥—Ä–∏ –≤–¥–≤–æ—Ö."""
    strings = {
        "name": "CheckersChess"
    }

    async def client_ready(self):
        await self.purgeSelf()

    async def purgeSelf(self):
        """–°–∫–∏–¥–∞—î –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ —Å—Ç–∞–Ω—É –≥—Ä–∏."""
        self._board_obj = None
        self._game_message = None
        self._game_chat_id = None
        self._selected_piece_pos = None
        self._possible_moves_for_selected = []
        self.colorName = "–≤–∏–ø–∞–¥–∫–æ–≤–æ"
        self.host_color = None
        self.game_running = False
        self.game_reason_ended = None
        self.players_ids = []
        self.host_id = None
        self.opponent_id = None
        self.opponent_name = None
        self.player_white_id = None
        self.player_black_id = None
        self._game_board_call = None
        self.mandatory_captures_enabled = self.db.get("checkers_module", "mandatory_captures_enabled", True)
        self.game_type = None  # "checkers" –∞–±–æ "chess"

    async def settings_menu(self, call):
        if call.from_user.id != self.host_id:
            await call.answer("–¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –±–æ—Ç–∞ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó –ø–∞—Ä—Ç—ñ—ó!")
            return  
        
        current_host_color_display = self.colorName
        if self.host_color == "white":
            current_host_color_display = "–±—ñ–ª–∏–π"
        elif self.host_color == "black":
            current_host_color_display = "—á–æ—Ä–Ω–∏–π"
        else:
            current_host_color_display = "–≤–∏–ø–∞–¥–∫–æ–≤–æ"

        opponent_name_display_for_settings = "–±—É–¥—å-—Ö—Ç–æ –±–∞–∂–∞—é—á–∏–π"
        invite_text_prefix_for_settings = "–í–∞—Å –∑–∞–ø—Ä–æ—à—É—é—Ç—å –∑—ñ–≥—Ä–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—é, –ø—Ä–∏–π–º–µ—Ç–µ?"
        if self.opponent_id:
            try:
                opponent_entity = await self.client.get_entity(self.opponent_id)
                opponent_name_display_for_settings = html.escape(opponent_entity.first_name)
            except Exception:
                pass
            invite_text_prefix_for_settings = f"<a href='tg://user?id={self.opponent_id}'>{opponent_name_display_for_settings}</a>, –≤–∞—Å –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∑—ñ–≥—Ä–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—é, –ø—Ä–∏–π–º–µ—Ç–µ?"

        game_name = "—à–∞—à–∫–∏" if self.game_type == "checkers" else "—à–∞—Ö–∏"
        settings_text = f"{invite_text_prefix_for_settings} –≤ {game_name}\n-- --\n"
        settings_text += f"–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
        settings_text += f"| - > ‚Ä¢ –•–æ—Å—Ç –≥—Ä–∞—î –∑–∞ {current_host_color_display} –∫–æ–ª—ñ—Ä\n"
        
        if self.game_type == "checkers":
            settings_text += f"| - > ‚Ä¢ –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤–∑—è—Ç—Ç—è: {'–£–≤—ñ–º–∫–Ω–µ–Ω—ñ' if self.mandatory_captures_enabled else '–í–∏–º–∫–Ω–µ–Ω—ñ'}"

        buttons = [
            [{"text":f"–ö–æ–ª—ñ—Ä (—Ö–æ—Å—Ç–∞): {current_host_color_display}","callback":self.set_color}]
        ]
        
        if self.game_type == "checkers":
            buttons.append([
                {"text":f"–û–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤–∑—è—Ç—Ç—è: {'–£–≤—ñ–º–∫' if self.mandatory_captures_enabled else '–í–∏–º–∫'}","callback":self.toggle_mandatory_captures}
            ])
        
        buttons.append([
            {"text":"–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è","callback":self.back_to_invite}
        ])

        await call.edit(
            text=settings_text,
            reply_markup=buttons
        )

    async def toggle_mandatory_captures(self, call):
        if call.from_user.id != self.host_id:
            await call.answer("–¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –±–æ—Ç–∞ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó –ø–∞—Ä—Ç—ñ—ó!")
            return
        self.mandatory_captures_enabled = not self.mandatory_captures_enabled
        self.db.set("checkers_module", "mandatory_captures_enabled", self.mandatory_captures_enabled)
        await self.settings_menu(call)

    async def back_to_invite(self, call):
        if call.from_user.id != self.host_id:
            await call.answer("–¶–µ –Ω–µ –¥–ª—è –≤–∞—Å!")
            return
        
        opponent_name_display = "–±—É–¥—å-—Ö—Ç–æ –±–∞–∂–∞—é—á–∏–π"
        invite_text_prefix = "–í–∞—Å –∑–∞–ø—Ä–æ—à—É—é—Ç—å –∑—ñ–≥—Ä–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—é, –ø—Ä–∏–π–º–µ—Ç–µ?"

        if self.opponent_id:
            try:
                opponent_entity = await self.client.get_entity(self.opponent_id)
                opponent_name_display = html.escape(opponent_entity.first_name)
            except Exception:
                pass
            invite_text_prefix = f"<a href='tg://user?id={self.opponent_id}'>{opponent_name_display}</a>, –≤–∞—Å –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∑—ñ–≥—Ä–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—é, –ø—Ä–∏–π–º–µ—Ç–µ?"

        current_host_color_display = self.colorName
        if self.host_color == "white":
            current_host_color_display = "–±—ñ–ª–∏–π"
        elif self.host_color == "black":
            current_host_color_display = "—á–æ—Ä–Ω–∏–π"
        else:
            current_host_color_display = "–≤–∏–ø–∞–¥–∫–æ–≤–æ"

        game_name = "—à–∞—à–∫–∏" if self.game_type == "checkers" else "—à–∞—Ö–∏"
        settings_text = f"{invite_text_prefix} –≤ {game_name}\n-- --\n"
        settings_text += f"–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
        settings_text += f"| - > ‚Ä¢ –•–æ—Å—Ç –≥—Ä–∞—î –∑–∞ {current_host_color_display} –∫–æ–ª—ñ—Ä\n"
        
        if self.game_type == "checkers":
            settings_text += f"| - > ‚Ä¢ –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤–∑—è—Ç—Ç—è: {'–£–≤—ñ–º–∫–Ω–µ–Ω—ñ' if self.mandatory_captures_enabled else '–í–∏–º–∫–Ω–µ–Ω—ñ'}"

        await call.edit(
            text=settings_text,
            reply_markup = [
                [
                    {"text": "–ü—Ä–∏–π–º–∞—é", "callback": self.accept_game, "args":("y",)},
                    {"text": "–ù—ñ", "callback": self.accept_game, "args":("n",)}
                ],
                [
                    {"text": "–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "callback": self.settings_menu}
                ]
            ]
        )

    async def set_color(self, call):
        if call.from_user.id != self.host_id:
            await call.answer("–¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –±–æ—Ç–∞ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É!")
            return
        
        current_host_color_display = self.colorName
        if self.host_color == "white":
            current_host_color_display = "–±—ñ–ª–∏–π"
        elif self.host_color == "black":
            current_host_color_display = "—á–æ—Ä–Ω–∏–π"
        else:
            current_host_color_display = "–≤–∏–ø–∞–¥–∫–æ–≤–æ"

        await call.edit(
            text=f"‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ—î—ó –ø–∞—Ä—Ç—ñ—ó.\n"
                 f"| - > –•–æ—Å—Ç –≥—Ä–∞—î –∑–∞: {current_host_color_display} –∫–æ–ª—ñ—Ä.\n–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä –π–æ–≥–æ —Ñ—ñ–≥—É—Ä",
            reply_markup=[
                [
                    {"text":"–ë—ñ–ª—ñ","callback":self.handle_color_choice,"args":("white","–±—ñ–ª–∏–π",)},
                    {"text":"–ß–æ—Ä–Ω—ñ","callback":self.handle_color_choice,"args":("black","—á–æ—Ä–Ω–∏–π",)}
                ],
                [
                    {"text":"–í–∏–ø–∞–¥–∫–æ–≤–æ", "callback":self.handle_color_choice,"args":(None,"–≤–∏–ø–∞–¥–∫–æ–≤–æ")}
                ],
                [
                    {"text":"–ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", "callback":self.settings_menu}
                ]
            ]
        )

    async def handle_color_choice(self, call, color, txt):
        if call.from_user.id != self.host_id:
            await call.answer("–¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –±–æ—Ç–∞ –º–æ–∂–µ –≤–∏–±–∏—Ä–∞—Ç–∏ –∫–æ–ª—ñ—Ä!")
            return
        self.colorName = txt
        self.host_color = color
        await self.set_color(call)

    @loader.command() 
    async def —à–∞—à–∫–∏(self, message):
        """[reply/username/id] –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ª—é–¥–∏–Ω—ñ –∑—ñ–≥—Ä–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—é –≤ —á–∞—Ç—ñ. –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ - –±—É–¥—å-—Ö—Ç–æ –±–∞–∂–∞—é—á–∏–π."""
        if self._board_obj:
            await message.edit("–ü–∞—Ä—Ç—ñ—è –≤–∂–µ –¥–µ—Å—å –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –∞–±–æ —Å–∫–∏–Ω—å—Ç–µ —ó—ó –∑ <code>.—Å—Ç–æ–ø–≥—Ä–∞</code>")
            return
        await self.purgeSelf()
        self.game_type = "checkers"
        return await self._start_game(message, "—à–∞—à–∫–∏")

    @loader.command() 
    async def —à–∞—Ö–∏(self, message):
        """[reply/username/id] –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –ª—é–¥–∏–Ω—ñ –∑—ñ–≥—Ä–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—é –≤ —à–∞—Ö–∏. –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ - –±—É–¥—å-—Ö—Ç–æ –±–∞–∂–∞—é—á–∏–π."""
        if self._board_obj:
            await message.edit("–ü–∞—Ä—Ç—ñ—è –≤–∂–µ –¥–µ—Å—å –∑–∞–ø—É—â–µ–Ω–∞. –ó–∞–≤–µ—Ä—à—ñ—Ç—å –∞–±–æ —Å–∫–∏–Ω—å—Ç–µ —ó—ó –∑ <code>.—Å—Ç–æ–ø–≥—Ä–∞</code>")
            return
        await self.purgeSelf()
        self.game_type = "chess"
        return await self._start_game(message, "—à–∞—Ö–∏")

    async def _start_game(self, message, game_name):
        self._game_message = message
        self._game_chat_id = message.chat_id
        self.host_id = message.sender_id

        opponent_found = False
        invite_text_prefix = ""

        if message.is_reply:
            r = await message.get_reply_message()
            opponent = r.sender
            self.opponent_id = opponent.id
            self.opponent_name = html.escape(opponent.first_name)
            opponent_found = True
        else:
            args = utils.get_args(message)
            if len(args) > 0:
                opponent_str = args[0]
                try:
                    if opponent_str.isdigit():
                        self.opponent_id = int(opponent_str)
                        opponent = await self.client.get_entity(self.opponent_id)
                        self.opponent_name = html.escape(opponent.first_name)
                    else:
                        opponent = await self.client.get_entity(opponent_str)
                        self.opponent_name = html.escape(opponent.first_name)
                        self.opponent_id = opponent.id
                    opponent_found = True
                except Exception:
                    await message.edit("–Ø –Ω–µ –∑–Ω–∞—Ö–æ–¥–∂—É —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                    return
        
        if opponent_found:
            if self.opponent_id == self._game_message.sender_id:
                await message.edit(f"–û–¥–∏–Ω–æ—á–Ω—ñ {game_name}? –í–∏–±–∞—á—Ç–µ, –Ω—ñ.")
                return
            self.players_ids = [self.opponent_id, self._game_message.sender_id]
            invite_text_prefix = f"<a href='tg://user?id={self.opponent_id}'>{self.opponent_name}</a>, –≤–∞—Å –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∑—ñ–≥—Ä–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—é –≤ {game_name}, –ø—Ä–∏–π–º–µ—Ç–µ?"
        else:
            self.opponent_id = None
            self.opponent_name = "–±—É–¥—å-—Ö—Ç–æ –±–∞–∂–∞—é—á–∏–π"
            invite_text_prefix = f"–í–∞—Å –∑–∞–ø—Ä–æ—à—É—é—Ç—å –∑—ñ–≥—Ä–∞—Ç–∏ –ø–∞—Ä—Ç—ñ—é –≤ {game_name}, –ø—Ä–∏–π–º–µ—Ç–µ?"
        
        current_host_color_display = self.colorName
        if self.host_color == "white":
            current_host_color_display = "–±—ñ–ª–∏–π"
        elif self.host_color == "black":
            current_host_color_display = "—á–æ—Ä–Ω–∏–π"
        else:
            current_host_color_display = "–≤–∏–ø–∞–¥–∫–æ–≤–æ"

        settings_text = f"{invite_text_prefix}\n-- --\n"
        settings_text += f"–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
        settings_text += f"| - > ‚Ä¢ –•–æ—Å—Ç –≥—Ä–∞—î –∑–∞ {current_host_color_display} –∫–æ–ª—ñ—Ä\n"
        
        if self.game_type == "checkers":
            settings_text += f"| - > ‚Ä¢ –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤–∑—è—Ç—Ç—è: {'–£–≤—ñ–º–∫–Ω–µ–Ω—ñ' if self.mandatory_captures_enabled else '–í–∏–º–∫–Ω–µ–Ω—ñ'}"

        await self.inline.form(
            message = message,
            text = settings_text,
            reply_markup = [
                [
                    {"text": "–ü—Ä–∏–π–º–∞—é", "callback": self.accept_game, "args":("y",)},
                    {"text": "–ù—ñ", "callback": self.accept_game, "args":("n",)}
                ],
                [
                    {"text": "–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "callback": self.settings_menu}
                ]
            ], 
            disable_security = True,
            on_unload=self.outdated_game
        )

    @loader.command() 
    async def —Å—Ç–æ–ø–≥—Ä–∞(self, message):
        """–î–æ—Å—Ç—Ä–æ–∫–æ–≤–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–∞—Ä—Ç—ñ—ó (–¥–ª—è —Ö–æ—Å—Ç–∞ –∞–±–æ –±—É–¥—å-—è–∫–æ–≥–æ –≥—Ä–∞–≤—Ü—è)"""
        if not self.game_running and self.opponent_id is None:
            if message.from_user.id != self.host_id:
                await message.edit("–í–∏ –Ω–µ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä —Ü—ñ—î—ó –ø–∞—Ä—Ç—ñ—ó —ñ –Ω–µ –º–æ–∂–µ—Ç–µ —ó—ó –∑—É–ø–∏–Ω–∏—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É.")
                return
        elif message.from_user.id != self.host_id and message.from_user.id not in self.players_ids:
            await message.edit("–í–∏ –Ω–µ –≥—Ä–∞–≤–µ—Ü—å —Ü—ñ—î—ó –ø–∞—Ä—Ç—ñ—ó —ñ –Ω–µ —ó—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä.")
            return

        if self._game_board_call:
            try:
                await self._game_board_call.edit(text="–ü–∞—Ä—Ç—ñ—é –±—É–ª–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")
            except Exception:
                pass
        elif self._game_message:
            try:
                await self._game_message.edit(text="–ü–∞—Ä—Ç—ñ—é –±—É–ª–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")
            except Exception:
                pass
        
        await self.purgeSelf()
        await message.edit("–î–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ.")

    async def accept_game(self, call, data):
        if call.from_user.id == self.host_id:
            if self.opponent_id is None and data == 'n':
                await call.edit(text="–ü–∞—Ä—Ç—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                await self.purgeSelf()
                return
            await call.answer("–î–∞–π –ª—é–¥–∏–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏!")
            return
        
        if data == 'y':
            if self.opponent_id is None:
                self.opponent_id = call.from_user.id
                try:
                    opponent_entity = await self.client.get_entity(self.opponent_id)
                    self.opponent_name = html.escape(opponent_entity.first_name)
                except Exception:
                    self.opponent_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π –≥—Ä–∞–≤–µ—Ü—å"
                await call.answer(f"–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –≥—Ä–∏ —è–∫ {self.opponent_name}!")
                self.players_ids = [self.opponent_id, self.host_id]
            elif call.from_user.id != self.opponent_id:
                await call.answer("–ù–µ —Ç–æ–±—ñ –ø—Ä–æ–ø–æ–Ω—É—é—Ç—å –≥—Ä—É!")
                return
            
            if self.game_type == "checkers":
                self._board_obj = CheckersBoard(mandatory_captures_enabled=self.mandatory_captures_enabled) 
            else:
                self._board_obj = ChessBoard()
            
            if not self.host_color:
                await call.edit(text="–í–∏–±–∏—Ä–∞—é —Å—Ç–æ—Ä–æ–Ω–∏...")
                await asyncio.sleep(0.5)
                self.host_color = self.ranColor()
            
            if self.host_color == "white":
                self.player_white_id = self.host_id
                self.player_black_id = self.opponent_id
            else:
                self.player_white_id = self.opponent_id
                self.player_black_id = self.host_id

            text = await self.get_game_status_text()
            await call.edit(text="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ—à–∫–∏...")
            await asyncio.sleep(0.5)
            
            self.game_running = True
            self._game_board_call = call
            
            await call.edit(text="–î–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑—Ä—ñ–∑–Ω–µ–Ω–Ω—è —Ñ—ñ–≥—É—Ä —É–≤—ñ–º–∫–Ω—ñ—Ç—å —Å–≤—ñ—Ç–ª—É —Ç–µ–º—É!")
            await asyncio.sleep(2.5)
            await self.render_board(text, call)
        else:
            if self.opponent_id is None:
                await call.answer("–¢—ñ–ª—å–∫–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä –º–æ–∂–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –≥—Ä—É, –¥–æ —è–∫–æ—ó –º–æ–∂–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –±—É–¥—å-—Ö—Ç–æ –±–∞–∂–∞—é—á–∏–π.")
                return
            elif call.from_user.id != self.opponent_id:
                await call.answer("–ù–µ —Ç–æ–±—ñ –ø—Ä–æ–ø–æ–Ω—É—é—Ç—å –≥—Ä—É!")
                return
            
            await call.edit(text="–í—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
            await self.purgeSelf()

    async def render_board(self, text, call):
        if not self._board_obj:
            await call.edit(text="–ü–æ–º–∏–ª–∫–∞: –î–æ—à–∫–∞ –≥—Ä–∏ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞. –ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
            await self.purgeSelf()
            return

        board_emojis = self._board_obj.to_list_of_emojis(self._selected_piece_pos, self._possible_moves_for_selected)
        
        btns = []
        for r in range(8):
            row_btns = []
            for c in range(8):
                row_btns.append({"text": board_emojis[r][c], "callback": self.handle_click, "args":(r, c,)})
            btns.append(row_btns)

        btns.append([{"text": "–ó–¥–∞—Ç–∏—Å—è", "callback": self.surrender_game}])

        await call.edit(
            text = text,
            reply_markup = btns,
            disable_security = True
        )
    
    async def surrender_game(self, call):
        user_id = call.from_user.id
        
        if user_id not in [self.player_white_id, self.player_black_id]:
            await call.answer("–í–∏ –Ω–µ –≥—Ä–∞–≤–µ—Ü—å —Ü—ñ—î—ó –ø–∞—Ä—Ç—ñ—ó —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–¥–∞—Ç–∏—Å—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ .—Å—Ç–æ–ø–≥—Ä–∞ –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ—ó –∑—É–ø–∏–Ω–∫–∏.")
            return

        surrendering_player_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π –≥—Ä–∞–≤–µ—Ü—å"
        try:
            surrendering_player_entity = await self.client.get_entity(user_id)
            surrendering_player_name = html.escape(surrendering_player_entity.first_name)
        except Exception:
            pass

        winner_id = None
        winner_color_text = ""
        if user_id == self.player_white_id:
            winner_id = self.player_black_id
            winner_color_text = "—á–æ—Ä–Ω–∏—Ö"
        elif user_id == self.player_black_id:
            winner_id = self.player_white_id
            winner_color_text = "–±—ñ–ª–∏—Ö"
        
        winner_name = "–û–ø–æ–Ω–µ–Ω—Ç"
        if winner_id:
            try:
                winner_entity = await self.client.get_entity(winner_id)
                winner_name = html.escape(winner_entity.first_name)
            except Exception:
                pass

        game_name = "—à–∞—à–∫–∏" if self.game_type == "checkers" else "—à–∞—Ö–∏"
        surrender_message = (
            f"–ü–∞—Ä—Ç—ñ—é –≤ {game_name} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: <a href='tg://user?id={user_id}'>{surrendering_player_name}</a> –∑–¥–∞–≤—Å—è(–ª–∞—Å—å).\n"
            f"–ü–µ—Ä–µ–º—ñ–≥(–ª–∞) <a href='tg://user?id={winner_id}'>{winner_name}</a> ({winner_color_text})!"
        )

        self.game_running = False
        self.game_reason_ended = surrender_message
        
        await call.edit(surrender_message)
        await self.purgeSelf()
        
    async def handle_click(self, call, r, c):
        if not self._board_obj or not self.game_running:
            await call.answer("–ì—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ—á–Ω—ñ—Ç—å –Ω–æ–≤—É –≥—Ä—É.")
            if self._board_obj:
                await self.purgeSelf()
            return

        game_over_status = self._board_obj.is_game_over()
        if game_over_status:
            if self.game_running:
                self.game_running = False
                self.game_reason_ended = game_over_status
                await self.render_board(await self.get_game_status_text(), call)
                await self.purgeSelf()
            await call.answer(f"–ü–∞—Ä—Ç—ñ—é –∑–∞–∫—ñ–Ω—á–µ–Ω–æ: {game_over_status}. –î–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É")
            return
        
        if call.from_user.id not in self.players_ids: 
            await call.answer("–ü–∞—Ä—Ç—ñ—è –Ω–µ –≤–∞—à–∞!")
            return
        
        current_player_id = self.player_white_id if self._board_obj.current_player == "white" else self.player_black_id
        if call.from_user.id != current_player_id:
            await call.answer("–ó–∞—Ä–∞–∑ —Ö—ñ–¥ –æ–ø–æ–Ω–µ–Ω—Ç–∞!")
            return

        piece_at_click = self._board_obj.get_piece_at(r, c)
        player_color_at_click = self._board_obj._get_player_color(piece_at_click)

        if self._selected_piece_pos is None:
            if player_color_at_click == self._board_obj.current_player:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –º—É–ª—å—Ç–∏-–∑–∞—Ö–≤–∞—Ç –¥–ª—è —à–∞—à–æ–∫
                if (self.game_type == "checkers" and 
                    hasattr(self._board_obj, 'mandatory_capture_from_pos') and 
                    self._board_obj.mandatory_capture_from_pos and 
                    self._board_obj.mandatory_capture_from_pos != (r, c)):
                    await call.answer("–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑–∞—Ö–≤–∞—Ç –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –ø–æ–∑–∏—Ü—ñ—ó!")
                    return

                possible_moves_with_info = self._board_obj.get_valid_moves_for_selection(r, c)
                
                if possible_moves_with_info:
                    self._selected_piece_pos = (r, c)
                    self._possible_moves_for_selected = possible_moves_with_info
                    await call.answer("–§—ñ–≥—É—Ä—É –≤–∏–±—Ä–∞–Ω–æ. –í–∏–±–µ—Ä—ñ—Ç—å –∫—É–¥–∏ —Ö–æ–¥–∏—Ç–∏.")
                    await self.render_board(await self.get_game_status_text(), call)
                else:
                    await call.answer("–î–ª—è —Ü—ñ—î—ó —Ñ—ñ–≥—É—Ä–∏ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ö–æ–¥—ñ–≤!")
            else:
                await call.answer("–¢—É—Ç –Ω–µ–º–∞—î –≤–∞—à–æ—ó —Ñ—ñ–≥—É—Ä–∏ –∞–±–æ —Ü–µ —Å–≤—ñ—Ç–ª–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞!")
        else:
            start_r, start_c = self._selected_piece_pos
            
            if (r, c) == (start_r, start_c):
                self._selected_piece_pos = None
                self._possible_moves_for_selected = []
                await call.answer("–í–∏–±—ñ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
                await self.render_board(await self.get_game_status_text(), call)
                return

            target_move_info = None
            for move_info in self._possible_moves_for_selected:
                if (move_info[0], move_info[1]) == (r, c):
                    target_move_info = move_info
                    break

            if target_move_info:
                end_r, end_c, is_capture_move = target_move_info
                made_capture_and_can_jump_again = self._board_obj.make_move(start_r, start_c, end_r, end_c, is_capture_move)
                
                if made_capture_and_can_jump_again and self.game_type == "checkers":
                    self._selected_piece_pos = (end_r, end_c)
                    self._possible_moves_for_selected = self._board_obj.get_valid_moves_for_selection(end_r, end_c)
                    await call.answer("–ó–∞—Ö–≤–∞—Ç! –ó—Ä–æ–±—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞—Ö–≤–∞—Ç.")
                else:
                    self._selected_piece_pos = None
                    self._possible_moves_for_selected = []
                    await call.answer("–•—ñ–¥ –∑—Ä–æ–±–ª–µ–Ω–æ.")
                
                game_over_status_after_move = self._board_obj.is_game_over()
                if game_over_status_after_move:
                    self.game_running = False
                    self.game_reason_ended = game_over_status_after_move
                    await call.answer(f"–ü–∞—Ä—Ç—ñ—é –∑–∞–∫—ñ–Ω—á–µ–Ω–æ: {game_over_status_after_move}")
                    await self.render_board(await self.get_game_status_text(), call)
                    await self.purgeSelf()
                    return
                
                await self.render_board(await self.get_game_status_text(), call)
            else:
                if player_color_at_click == self._board_obj.current_player:
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –º—É–ª—å—Ç–∏-–∑–∞—Ö–≤–∞—Ç –¥–ª—è —à–∞—à–æ–∫
                    if (self.game_type == "checkers" and 
                        hasattr(self._board_obj, 'mandatory_capture_from_pos') and 
                        self._board_obj.mandatory_capture_from_pos and 
                        self._board_obj.mandatory_capture_from_pos != (r, c)):
                        await call.answer("–í–∏ –ø–æ–≤–∏–Ω–Ω—ñ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑–∞—Ö–≤–∞—Ç –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –ø–æ–∑–∏—Ü—ñ—ó!")
                        return
                    
                    possible_moves_with_info = self._board_obj.get_valid_moves_for_selection(r, c)
                    
                    if possible_moves_with_info:
                        self._selected_piece_pos = (r, c)
                        self._possible_moves_for_selected = possible_moves_with_info
                        await call.answer("–í–∏–±—Ä–∞–Ω–æ —ñ–Ω—à—É —Ñ—ñ–≥—É—Ä—É.")
                        await self.render_board(await self.get_game_status_text(), call)
                    else:
                        await call.answer("–î–ª—è —Ü—ñ—î—ó —Ñ—ñ–≥—É—Ä–∏ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ö–æ–¥—ñ–≤!")
                else:
                    await call.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ö—ñ–¥ –∞–±–æ —Ü—ñ–ª—å –Ω–µ —î –≤–∞—à–æ—é —Ñ—ñ–≥—É—Ä–æ—é!")

    async def get_game_status_text(self):
        if not self._board_obj:
            return "–ì—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."

        game_over_status = self._board_obj.is_game_over()
        if game_over_status:
            if self.game_reason_ended:
                return self.game_reason_ended
            
            winner_name = ""
            game_name = "—à–∞—à–∫–∏" if self.game_type == "checkers" else "—à–∞—Ö–∏"
            if "–ü–µ—Ä–µ–º–æ–≥–∞ –±—ñ–ª–∏—Ö" in game_over_status:
                try:
                    winner_name = html.escape((await self.client.get_entity(self.player_white_id)).first_name)
                    return f"–ü–∞—Ä—Ç—ñ—é –≤ {game_name} –∑–∞–∫—ñ–Ω—á–µ–Ω–æ: {game_over_status}\n\n–ü–µ—Ä–µ–º—ñ–≥(–ª–∞) <a href='tg://user?id={self.player_white_id}'>{winner_name}</a> (–±—ñ–ª—ñ)!"
                except Exception:
                    return f"–ü–∞—Ä—Ç—ñ—é –≤ {game_name} –∑–∞–∫—ñ–Ω—á–µ–Ω–æ: {game_over_status}\n\n–ü–µ—Ä–µ–º–æ–≥–ª–∏ –ë—ñ–ª—ñ!"
            elif "–ü–µ—Ä–µ–º–æ–≥–∞ —á–æ—Ä–Ω–∏—Ö" in game_over_status:
                try:
                    winner_name = html.escape((await self.client.get_entity(self.player_black_id)).first_name)
                    return f"–ü–∞—Ä—Ç—ñ—é –≤ {game_name} –∑–∞–∫—ñ–Ω—á–µ–Ω–æ: {game_over_status}\n\n–ü–µ—Ä–µ–º—ñ–≥(–ª–∞) <a href='tg://user?id={self.player_black_id}'>{winner_name}</a> (—á–æ—Ä–Ω—ñ)!"
                except Exception:
                    return f"–ü–∞—Ä—Ç—ñ—é –≤ {game_name} –∑–∞–∫—ñ–Ω—á–µ–Ω–æ: {game_over_status}\n\n–ü–µ—Ä–µ–º–æ–≥–ª–∏ –ß–æ—Ä–Ω—ñ!"
            return f"–ü–∞—Ä—Ç—ñ—é –≤ {game_name} –∑–∞–∫—ñ–Ω—á–µ–Ω–æ: {game_over_status}"

        white_player_name = "–ë—ñ–ª—ñ"
        black_player_name = "–ß–æ—Ä–Ω—ñ"
        try:
            white_player_entity = await self.client.get_entity(self.player_white_id)
            white_player_name = html.escape(white_player_entity.first_name)
        except Exception:
            pass
        
        try:
            black_player_entity = await self.client.get_entity(self.player_black_id)
            black_player_name = html.escape(black_player_entity.first_name)
        except Exception:
            pass

        current_player_id = self.player_white_id if self._board_obj.current_player == "white" else self.player_black_id
        current_player_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π –≥—Ä–∞–≤–µ—Ü—å"
        try:
            current_player_name_entity = await self.client.get_entity(current_player_id)
            current_player_name = html.escape(current_player_name_entity.first_name)
        except Exception:
            pass
        
        game_name = "–®–∞—à–∫–∏" if self.game_type == "checkers" else "–®–∞—Ö–∏"
        status_text = f"{game_name}\n‚ôî –ë—ñ–ª—ñ - <a href='tg://user?id={self.player_white_id}'>{white_player_name}</a>\n‚ôö –ß–æ—Ä–Ω—ñ - <a href='tg://user?id={self.player_black_id}'>{black_player_name}</a>\n\n"
        
        if self._board_obj.current_player == "white":
            status_text += f"–•—ñ–¥ –±—ñ–ª–∏—Ö (<a href='tg://user?id={current_player_id}'>{current_player_name}</a>)"
        else:
            status_text += f"–•—ñ–¥ —á–æ—Ä–Ω–∏—Ö (<a href='tg://user?id={current_player_id}'>{current_player_name}</a>)"
        
        if self.game_type == "checkers":
            status_text += f"\n–û–±–æ–≤'—è–∑–∫–æ–≤—ñ –≤–∑—è—Ç—Ç—è: {'–£–≤—ñ–º–∫–Ω–µ–Ω—ñ' if self.mandatory_captures_enabled else '–í–∏–º–∫–Ω–µ–Ω—ñ'}"

            if hasattr(self._board_obj, 'mandatory_capture_from_pos') and self._board_obj.mandatory_capture_from_pos:
                status_text += "\n–û–±–æ–≤'—è–∑–∫–æ–≤–∏–π –∑–∞—Ö–≤–∞—Ç!"

        return status_text

    async def outdated_game(self):
        if self.game_running or self._board_obj:
            if self._game_board_call:
                try:
                    await self._game_board_call.edit(text="–ü–∞—Ä—Ç—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.")
                except Exception:
                    pass
            elif self._game_message:
                try:
                    await self._game_message.edit(text="–ü–∞—Ä—Ç—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.")
                except Exception:
                    pass
            await self.purgeSelf()

    def ranColor(self):
        return "white" if random.randint(1,2) == 1 else "black"