
__version__ = (1, 0, 2)
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta developer: @vadym_yem
# scope: inline
# scope: acbot_only
# scope: acbot_min 1.2.10

from .. import loader, utils
from ..inline.types import InlineCall, InlineQuery
from telethon.tl.types import Message


@loader.tds
class LongReadMod(loader.Module):
    """Pack longreads under button spoilers"""

    strings = {
        "name": "LongRead",
        "no_text": "üö´ <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —Ç–µ–∫—Å—Ç, —â–æ —Ç—Ä–µ–±–∞ –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏</b>",
        "longread": (
            "üî• <b>–î–ª—è –≤–∞—Å —Ü—ñ–∫–∞–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n<i>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –π–æ–≥–æ :) \n–ö–Ω–æ–ø–∫–∞"
            " –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–æ—Ç—è–≥–æ–º 6 –≥–æ–¥–∏–Ω</i>"
        ),
        "_cmd_doc_lr": "<text> - –°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–Ω–≥—Ä—ñ–¥",
        "_cls_doc": "–•–æ–≤–∞—î –≤–∞—à —Ç–µ–∫—Å—Ç",
    }

    strings_ua = {
        "no_text": "üö´ <b>Please, specify text to hide</b>",
        "longread": (
            "üî• <b>–î–ª—è –≤–∞—Å —Ü—ñ–∫–∞–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</b>\n<i>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –π–æ–≥–æ :) \n–ö–Ω–æ–ø–∫–∞"
            " –∞–∫—Ç–∏–≤–Ω–∞ –ø—Ä–æ—Ç—è–≥–æ–º 6 –≥–æ–¥–∏–Ω</i>"
        ),
        "_cmd_doc_lr": "<text> - –°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–æ–Ω–≥—Ä—ñ–¥",
        "_cls_doc": "–•–æ–≤–∞—î –≤–∞—à —Ç–µ–∫—Å—Ç –ø—ñ–¥ –≥–∞—Ä–Ω—É –∫–Ω–æ–ø–æ—á–∫—É",
    }

    async def lrcmd(self, message: Message):
        """<text> - Create new hidden message"""
        args = utils.get_args_raw(message)
        if not args:
            return

        await self.inline.form(
            self.strings("longread"),
            message,
            reply_markup={
                "text": "üìñ Open spoiler",
                "callback": self._handler,
                "args": (args,),
            },
            disable_security=True,
        )

    async def lr_inline_handler(self, query: InlineQuery):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–∞—Ä–Ω–µ–Ω—å–∫–µ –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        text = query.args

        if not text:
            return await query.e400()

        return {
            "title": "–°—Ö–æ–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ–¥ –≥–∞—Ä–Ω—É –∫–Ω–æ–ø–æ—á–∫—É",
            "description": "‚Ñπ This will create button-spoiler",
            "thumb": "https://img.icons8.com/external-wanicon-flat-wanicon/64/000000/external-read-free-time-wanicon-flat-wanicon.png",
            "message": self.strings("longread"),
            "reply_markup": {
                "text": "üìñ Open spoiler",
                "callback": self._handler,
                "args": (text,),
                "disable_security": True,
            },
        }

    async def _handler(self, call: InlineCall, text: str):
        """Process button presses"""
        await call.edit(text)
        await call.answer()
