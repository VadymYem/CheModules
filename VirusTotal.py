#meta developer: @blazeftg, @wsinfo
import os, json, aiohttp, tempfile, asyncio
from .. import loader, utils
from hikkatl.tl.types import Message

__version__ = (1, 1, 0)


@loader.tds
class VirusTotalMod(loader.Module):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ–∞–π–ª–∏ –Ω–∞ –≤—ñ—Ä—É—Å–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é VirusTotal"""

    strings = {
        "name": "VirusTotal",
        "no_file": "<emoji document_id=5210952531676504517>üö´</emoji> <b>–í–∏ –Ω–µ –≤–∏–±—Ä–∞–ª–∏ —Ñ–∞–π–ª.</b>",
        "no_reply": "<emoji document_id=5210952531676504517>üö´</emoji> <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª–æ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞.</b>",
        "reply_not_document": "<emoji document_id=5210952531676504517>üö´</emoji> <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª.</b>",
        "download": "<emoji document_id=5334677912270415274>üì•</emoji> <b>–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ñ–∞–π–ª...</b>",
        "scan": "<emoji document_id=5325792861885570739>üîç</emoji> <b>–°–∫–∞–Ω—É–π—é —Ñ–∞–π–ª...</b>",
        "processing": "<emoji document_id=5325792861885570739>‚è≥</emoji> <b>–û—á—ñ–∫—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è...</b>",
        "link": "ü¶† –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ VirusTotal",
        "no_virus": "‚úÖ –§–∞–π–ª —á–∏—Å—Ç–∏–π. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ.",
        "error": "<emoji document_id=5210952531676504517>‚ùå</emoji> <b>–ü–æ–º–∏–ª–∫–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:</b>",
        "no_format": "<emoji document_id=5210952531676504517>üö´</emoji> <b>–¶–µ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è.</b>",
        "no_apikey": "<emoji document_id=5260342697075416641>üö´</emoji> <b>–í–∏ –Ω–µ –≤–∫–∞–∑–∞–ª–∏ API –∫–ª—é—á. –û—Ç—Ä–∏–º–∞–π—Ç–µ –π–æ–≥–æ –Ω–∞ www.virustotal.com/gui/my-apikey</b>",
        "file_too_large": "<emoji document_id=5210952531676504517>üìè</emoji> <b>–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä - 650MB.</b>",
        "analysis_timeout": "<emoji document_id=5210952531676504517>‚è∞</emoji> <b>–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ.</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "token-vt",
                None,
                lambda: "API –∫–ª—é—á –∑ www.virustotal.com/gui/my-apikey",
                validator=loader.validators.Hidden(),
            ),
            loader.ConfigValue(
                "max_wait_time",
                300,
                lambda: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è (—Å–µ–∫—É–Ω–¥–∏)",
                validator=loader.validators.Integer(minimum=30, maximum=600),
            ),
        )

    @loader.command()
    async def vt(self, message: Message):
        """<–≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ñ–∞–π–ª> - –ü–µ—Ä–µ–≤—ñ—Ä—è—î —Ñ–∞–π–ª–∏ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—ñ—Ä—É—Å—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é VirusTotal"""
        if not message.is_reply:
            await utils.answer(message, self.strings("no_reply"))
            return

        reply = await message.get_reply_message()
        if not reply.document:
            await utils.answer(message, self.strings("reply_not_document"))
            return

        if not self.config.get("token-vt"):
            await utils.answer(message, self.strings("no_apikey"))
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É (VirusTotal –æ–±–º–µ–∂–µ–Ω–Ω—è - 650MB)
        if reply.document.size > 650 * 1024 * 1024:
            await utils.answer(message, self.strings("file_too_large"))
            return

        async with aiohttp.ClientSession() as session:
            with tempfile.TemporaryDirectory() as temp_dir:
                try:
                    await utils.answer(message, self.strings("download"))
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∑–ø–µ—á–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
                    safe_filename = reply.document.attributes[0].file_name if reply.document.attributes else "unknown_file"
                    if not safe_filename:
                        safe_filename = f"file_{reply.document.id}"
                    
                    file_path = os.path.join(temp_dir, safe_filename)
                    await reply.download_media(file_path)

                    file_extension = os.path.splitext(safe_filename)[1].lower()
                    
                    # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
                    allowed_extensions = (
                        ".exe", ".dll", ".sys", ".bat", ".cmd", ".com", ".pif", ".scr",
                        ".msi", ".jar", ".apk", ".dex", ".zip", ".rar", ".7z", ".tar",
                        ".gz", ".bz2", ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt",
                        ".pptx", ".rtf", ".js", ".vbs", ".ps1", ".py", ".php", ".html",
                        ".htm", ".swf", ".dmg", ".pkg", ".deb", ".rpm", ".iso"
                    )

                    if file_extension not in allowed_extensions:
                        await utils.answer(message, self.strings("no_format"))
                        return

                    token = self.config["token-vt"]
                    headers = {"x-apikey": token}

                    await utils.answer(message, self.strings("scan"))

                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª –Ω–∞ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
                    with open(file_path, "rb") as file:
                        data = aiohttp.FormData()
                        data.add_field('file', file, filename=safe_filename)
                        
                        async with session.post(
                            "https://www.virustotal.com/api/v3/files",
                            headers=headers,
                            data=data,
                        ) as response:
                            if response.status != 200:
                                error_text = await response.text()
                                await utils.answer(message, f"{self.strings('error')} HTTP {response.status}\n<code>{error_text}</code>")
                                return

                            result = await response.json()
                            analysis_id = result["data"]["id"]

                    await utils.answer(message, self.strings("processing"))

                    # –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É
                    max_wait = self.config["max_wait_time"]
                    wait_time = 0
                    check_interval = 10  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥

                    while wait_time < max_wait:
                        async with session.get(
                            f"https://www.virustotal.com/api/v3/analyses/{analysis_id}",
                            headers=headers,
                        ) as response:
                            if response.status != 200:
                                error_text = await response.text()
                                await utils.answer(message, f"{self.strings('error')} HTTP {response.status}\n<code>{error_text}</code>")
                                return

                            analysis_result = await response.json()
                            
                            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª—ñ–∑—É
                            if analysis_result["data"]["attributes"]["status"] == "completed":
                                break
                            
                            await asyncio.sleep(check_interval)
                            wait_time += check_interval
                    else:
                        await utils.answer(message, self.strings("analysis_timeout"))
                        return

                    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
                    file_hash = analysis_result["meta"]["file_info"]["sha256"]
                    
                    async with session.get(
                        f"https://www.virustotal.com/api/v3/files/{file_hash}",
                        headers=headers,
                    ) as response:
                        if response.status != 200:
                            error_text = await response.text()
                            await utils.answer(message, f"{self.strings('error')} HTTP {response.status}\n<code>{error_text}</code>")
                            return

                        file_report = await response.json()
                        scan_results = file_report["data"]["attributes"]["last_analysis_results"]
                        
                        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                        detections = []
                        suspicious = []
                        total_engines = len(scan_results)
                        malicious_count = 0
                        suspicious_count = 0
                        
                        for engine, details in scan_results.items():
                            if details["category"] == "malicious":
                                malicious_count += 1
                                detections.append(f"üî¥ <b>{engine}</b>: <code>{details.get('result', 'Malicious')}</code>")
                            elif details["category"] == "suspicious":
                                suspicious_count += 1
                                suspicious.append(f"üü° <b>{engine}</b>: <code>{details.get('result', 'Suspicious')}</code>")

                        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        if malicious_count == 0 and suspicious_count == 0:
                            result_text = self.strings("no_virus")
                            status_emoji = "‚úÖ"
                        elif malicious_count > 0:
                            result_text = "\n".join(detections[:10])  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 10 –≤–∏—è–≤–ª–µ–Ω—å
                            if len(detections) > 10:
                                result_text += f"\n<i>... —Ç–∞ —â–µ {len(detections) - 10} –≤–∏—è–≤–ª–µ–Ω—å</i>"
                            status_emoji = "üö®"
                        else:
                            result_text = "\n".join(suspicious[:5])  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5 –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö
                            if len(suspicious) > 5:
                                result_text += f"\n<i>... —Ç–∞ —â–µ {len(suspicious) - 5} –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö</i>"
                            status_emoji = "‚ö†Ô∏è"

                        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–∞–π–ª
                        file_info = file_report["data"]["attributes"]
                        file_size = file_info.get("size", 0)
                        file_type = file_info.get("type_description", "Unknown")
                        scan_date = file_info.get("last_analysis_date", 0)

                        info_text = f"üìÅ <b>–§–∞–π–ª:</b> <code>{safe_filename}</code>\n"
                        info_text += f"üìè <b>–†–æ–∑–º—ñ—Ä:</b> <code>{self._format_size(file_size)}</code>\n"
                        info_text += f"üè∑Ô∏è <b>–¢–∏–ø:</b> <code>{file_type}</code>\n"
                        info_text += f"üîç <b>SHA256:</b> <code>{file_hash[:16]}...</code>\n\n"

                        final_text = f"{status_emoji} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:</b> {malicious_count + suspicious_count}/{total_engines}\n\n"
                        final_text += info_text
                        
                        if malicious_count > 0:
                            final_text += f"üö® <b>–í–∏—è–≤–ª–µ–Ω–æ –∑–∞–≥—Ä–æ–∑:</b> {malicious_count}\n"
                        if suspicious_count > 0:
                            final_text += f"‚ö†Ô∏è <b>–ü—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö:</b> {suspicious_count}\n"
                            
                        final_text += f"\n{result_text}"

                        url = f"https://www.virustotal.com/gui/file/{file_hash}/detection"
                        
                        await self.inline.form(
                            text=final_text,
                            message=message,
                            reply_markup={
                                "text": self.strings("link"),
                                "url": url,
                            },
                        )

                except Exception as e:
                    await utils.answer(
                        message,
                        f"{self.strings('error')}\n\n<code>{type(e).__name__}: {str(e)}</code>",
                    )

    def _format_size(self, size_bytes):
        """–§–æ—Ä–º–∞—Ç—É—î —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É —É –∑—Ä—É—á–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ"""
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024
            i += 1
        
        return f"{size_bytes:.1f} {size_names[i]}"

    @loader.command()
    async def vtconfig(self, message: Message):
        """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –º–æ–¥—É–ª—è VirusTotal"""
        config_text = "‚öôÔ∏è <b>–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è VirusTotal:</b>\n\n"
        
        if self.config.get("token-vt"):
            token = self.config["token-vt"]
            masked_token = f"{token[:8]}...{token[-4:]}" if len(token) > 12 else "***"
            config_text += f"üîë <b>API –∫–ª—é—á:</b> <code>{masked_token}</code> ‚úÖ\n"
        else:
            config_text += f"üîë <b>API –∫–ª—é—á:</b> <i>–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</i> ‚ùå\n"
            
        config_text += f"‚è±Ô∏è <b>–ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è:</b> <code>{self.config['max_wait_time']} —Å–µ–∫</code>\n\n"
        config_text += "<i>–î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –º–æ–¥—É–ª—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó</i>"
        
        await utils.answer(message, config_text)