# meta developer: @blazeftg / @wsinfo
# meta version: 1.2.4
# meta hikka: *

import asyncio
import time
from telethon import events
from telethon.tl.types import Message
from .. import loader, utils

@loader.tds
class AskPlexMod(loader.Module):
    """
    –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ @askplexbot,
    —è–∫–∏–π –∫–æ—Ä–µ–∫—Ç–Ω–æ –æ—á—ñ–∫—É—î –Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    –í–∫–ª—é—á–∞—î —Ä–µ–∂–∏–º —Ç—Ä–∏–≥–µ—Ä–∞ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏.
    """

    strings = {
        "name": "AskPlexAI",
        "loading": "üîÑ <b>–ó–∞–ø–∏—Ç—É—é AuthorAi...</b>",
        "no_args": "üö´ <b>–í–∏ –Ω–µ –≤–≤–µ–ª–∏ –∑–∞–ø–∏—Ç.</b>\n–ù–∞–ø–∏—à—ñ—Ç—å <code>.–∞ &lt;—Ç–µ–∫—Å—Ç&gt;</code>",
        "start_text": "<b>ü§ñ AuthorAi:</b>\n",
        "context_text": "‚úÖ <b>–î—ñ–∞–ª–æ–≥ –∑ AuthorAi —Å–∫–∏–Ω—É—Ç–æ.</b>",
        "timeout_error": "‚è≥ <b>AuthorAi –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ –ø—Ä–æ—Ç—è–≥–æ–º 120 —Å–µ–∫—É–Ω–¥.</b> –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        "trigger_prefix": "–∞—Å ",
        "mode_on": "‚úÖ <b>–†–µ–∂–∏–º —Ç—Ä–∏–≥–µ—Ä–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–æ.</b>\n–¢–µ–ø–µ—Ä –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ <code>–∞—Å </code>, –±—É–¥—É—Ç—å –æ–±—Ä–æ–±–ª—è—Ç–∏—Å—è –≤ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —á–∞—Ç–∞—Ö.",
        "mode_off": "‚ÑπÔ∏è <b>–†–µ–∂–∏–º —Ç—Ä–∏–≥–µ—Ä–∞ –≤–∏–º–∫–Ω–µ–Ω–æ.</b>",
        "chat_added": "‚úÖ <b>–ß–∞—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –¥–ª—è —Ç—Ä–∏–≥–µ—Ä–∞.</b>",
        "chat_already_added": "‚ÑπÔ∏è <b>–¶–µ–π —á–∞—Ç –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö.</b>",
        "powered_by": "\n\n<a href='https://t.me/wsinfo/'>–ü—Ä–æ –ê–≤—Ç–æ—Ä–∞</a>"
                      " | <a href='https://authorche.top/donate'>–ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏‚ù§Ô∏è‚Äçüî•</a>"
                      "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                      "Powered by <a href='https://authorche.top'>AuthorChe</a>",
        "wait_limit": "‚è≥ <b>–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤.</b> –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ <b>{} —Å–µ–∫—É–Ω–¥</b> –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º.",
    }

    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –º–æ–¥—É–ª—è"""
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "trigger_mode",
                False,
                "–ß–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π —Ä–µ–∂–∏–º —Ç—Ä–∏–≥–µ—Ä–∞ '–∞—Å '",
                validator=loader.validators.Boolean(),
            ),
            loader.ConfigValue(
                "allowed_chats",
                [],
                "–°–ø–∏—Å–æ–∫ ID —á–∞—Ç—ñ–≤, –¥–µ —Ç—Ä–∏–≥–µ—Ä '–∞—Å ' –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏",
            ), # <-- –í–ê–õ–Ü–î–ê–¢–û–† –ü–†–ò–ë–†–ê–ù–û –î–õ–Ø –°–£–ú–Ü–°–ù–û–°–¢–Ü
        )

    async def client_ready(self, client, db):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ —ñ–Ω—à–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö"""
        self.client = client
        self.db = db
        self.me = await client.get_me()
        self.gpt_free = "@askplexbot"
        self.last_request_time = {}
        self.request_cooldown = 5  # 5 —Å–µ–∫—É–Ω–¥

    async def _check_rate_limit(self, user_id: int) -> float or None:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        current_time = time.time()
        if user_id in self.last_request_time:
            time_passed = current_time - self.last_request_time[user_id]
            if time_passed < self.request_cooldown:
                return round(self.request_cooldown - time_passed, 1)
        return None

    async def message_q(
        self,
        text: str,
        user_id: int,
        mark_read: bool = False,
        delete: bool = False,
        ignore_answer: bool = False,
    ) -> Message or None:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –æ—á—ñ–∫—É—î –Ω–∞ –ø–æ–≤–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å, –≤—ñ–¥—Å—Ç–µ–∂—É—é—á–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è."""
        async with self.client.conversation(user_id, timeout=125) as conv:
            msg_to_bot = await conv.send_message(text)
            response = await conv.get_response()

            if "–ú—ñ—Ä–∫—É—é... ‚è≥" in response.text or "Thinking... ‚è≥" in response.text:
                try:
                    edited_event = await conv.wait_event(
                        events.MessageEdited(
                            chats=user_id,
                            func=lambda event: event.id == response.id
                        ),
                        timeout=120
                    )
                    response = edited_event
                except asyncio.TimeoutError:
                    return Message(message=self.strings["timeout_error"])

            if mark_read:
                await conv.mark_read()
            if delete:
                await msg_to_bot.delete()
                if response:
                    await response.delete()
            if ignore_answer:
                return None

            return response

    async def –∞cmd(self, message: Message):
        """{text} - –æ–±—Ä–æ–±–∏—Ç–∏ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ AuthorAi"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_args"])
            return

        remaining_time = await self._check_rate_limit(message.sender_id)
        if remaining_time:
            await utils.answer(message, self.strings["wait_limit"].format(remaining_time))
            return
            
        processing_msg = await utils.answer(message, self.strings["loading"])

        response = await self.message_q(
            args, self.gpt_free, mark_read=True, delete=False, ignore_answer=False
        )

        if not response or not response.text:
            text = self.strings["timeout_error"]
        else:
            text = self.strings["start_text"] + response.text.replace("Perplexity", "AuthorAi")
            text += self.strings["powered_by"]

        await utils.answer(processing_msg, text)
        if message.is_reply:
             await message.delete()

        self.last_request_time[message.sender_id] = time.time()

    async def –∞–∞cmd(self, message: Message):
        """- —Å–∫–∏–Ω—É—Ç–∏ –¥—ñ–∞–ª–æ–≥ —ñ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π"""
        await self.message_q(
            "/newchat", self.gpt_free, mark_read=True, delete=True, ignore_answer=True
        )
        await utils.answer(message, self.strings["context_text"])

    async def askmecmd(self, message: Message):
        """- —É–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º —Ç—Ä–∏–≥–µ—Ä–∞ '–∞—Å '"""
        current_mode = self.config["trigger_mode"]
        self.config["trigger_mode"] = not current_mode
        
        if not current_mode:
            await utils.answer(message, self.strings["mode_on"])
        else:
            await utils.answer(message, self.strings["mode_off"])

    async def addcmd(self, message: Message):
        """- –¥–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Ç –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –¥–ª—è —Ç—Ä–∏–≥–µ—Ä–∞"""
        chat_id = message.chat_id
        # –ü–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑ –∫–æ–Ω—Ñ—ñ–≥—É, –∑–º—ñ–Ω–∏—Ç–∏ –π–æ–≥–æ —ñ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–∑–∞–¥
        allowed_chats = self.config["allowed_chats"]
        if chat_id not in allowed_chats:
            allowed_chats.append(chat_id)
            self.config["allowed_chats"] = allowed_chats
            await utils.answer(message, self.strings["chat_added"])
        else:
            await utils.answer(message, self.strings["chat_already_added"])

    @loader.watcher(no_commands=True)
    async def watcher(self, message: Message):
        """–°–ª—É—Ö–∞—á –¥–ª—è —Ç—Ä–∏–≥–µ—Ä–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º '–∞—Å '"""
        if (
            not self.config["trigger_mode"]
            or not isinstance(message, Message)
            or message.sender_id == self.me.id
            or message.via_bot_id
            or not message.text
            or message.chat_id not in self.config["allowed_chats"]
            or not message.text.lower().startswith(self.strings["trigger_prefix"])
        ):
            return
            
        remaining_time = await self._check_rate_limit(message.sender_id)
        if remaining_time:
            return

        query_text = message.text[len(self.strings["trigger_prefix"]):].strip()
        if not query_text:
            return
            
        try:
            response = await self.message_q(
                query_text, self.gpt_free, mark_read=True, delete=False, ignore_answer=False
            )
            
            if response and response.text:
                text = self.strings["start_text"] + response.text.replace("Perplexity", "AuthorAi")
                text += self.strings["powered_by"]
                await utils.answer(message, text)
                self.last_request_time[message.sender_id] = time.time()
                
        except Exception as e:
            await utils.answer(message, f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞:</b> {str(e)}")
