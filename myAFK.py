import time
import logging
import datetime
import asyncio
from telethon import types
from .. import loader, utils
from ..inline.types import InlineCall
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.functions.account import UpdateProfileRequest

logger = logging.getLogger(__name__)


class MyAfkMod(loader.Module):
	"""Professional AFK module by AuthorChe"""

	async def client_ready(self, client, db):
		self._db = db
		self._me = await client.get_me()
		self._db.set(__name__, 'change_name', True)
		# –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º —Å–Ω—É
		asyncio.create_task(self._auto_sleep_manager())

	strings = {
		"name": "myAFK",
		"lname": "| ~‚Åß  ~dev/",

		"bt_off_afk": "üåü <b>–†–µ–∂–∏–º offline</b> <b>–≤–∏–º–∫–Ω–µ–Ω–æ</b>! –ó–Ω–æ–≤—É –Ω–∞ –∑–≤'—è–∑–∫—É ‚ú®",
		"bt_off_work": "üíº <b>–†–æ–±–æ—á–∏–π —Å—Ç–∞—Ç—É—Å</b> <b>–≤–∏–º–∫–Ω–µ–Ω–æ</b>! –í—ñ–ª—å–Ω–∏–π —á–∞—Å ‚ú®",

		"_cfg_cst_btn": "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç, —è–∫–µ –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏–º–µ –ø—ñ–¥ —Ç–µ–∫—Å—Ç–æ–º –ê–§–ö. –©–æ–± –∑–æ–≤—Å—ñ–º –ø—Ä–∏–±—Ä–∞—Ç–∏, –Ω–∞–ø–∏—à—ñ—Ç—å None",
		"button__text": "–î–æ–¥–∞—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ê–§–ö —Ä–µ–∂–∏–º—É?",
		"custom_text__afk_text": "–ö–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç –∞—Ñ–∫. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π {time} –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —á–∞—Å—É –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è —É –º–µ—Ä–µ–∂—ñ, {reason} –¥–ª—è –ø—Ä–∏—á–∏–Ω–∏",
		"work_text__text": "–ö–∞—Å—Ç–æ–º–Ω–∏–π —Ç–µ–∫—Å—Ç —Ä–æ–±–æ—á–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π {time} –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è",
	}

	def render_settings(self):
		active = self._db.get(__name__, 'afk')
		work_active = self._db.get(__name__, 'work')
		auto_sleep = self._db.get(__name__, 'auto_sleep', True)
		
		if active == True:
			a_active = "–£–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ"
		else:
			a_active = '–í–∏–º–∫–Ω–µ–Ω–æ üö´'
			
		if work_active == True:
			w_active = "–£–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ"
		else:
			w_active = '–í–∏–º–∫–Ω–µ–Ω–æ üö´'
			
		if auto_sleep == True:
			s_active = "–£–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ"
		else:
			s_active = '–í–∏–º–∫–Ω–µ–Ω–æ üö´'
			
		change_name = self._db.get(__name__, 'change_name')
		if change_name == True:
			a_change_name = '–¢–∞–∫'
		else:
			a_change_name = '–ù—ñ'
			
		text = (
			f'üéÜ <b>myAfk Professional</b>\n'
			f'‚îú<b>Offline —Ä–µ–∂–∏–º:</b> {a_active}\n'
			f'‚îú<b>–†–æ–±–æ—á–∏–π —Å—Ç–∞—Ç—É—Å:</b> {w_active}\n'
			f'‚îú<b>–ê–≤—Ç–æ-—Å–æ–Ω (22:00-8:00):</b> {s_active}\n'
			f'‚îî<b>–ó–º—ñ–Ω–∞ –ø—Ä–µ—Ñ—ñ–∫—Å–∞:</b> <code>{a_change_name}</code> üìù'
		)
		return text

	def __init__(self):
		self.config = loader.ModuleConfig(
			loader.ConfigValue(
				"prefix",
				'| ~‚Åß  ~dev/',
				doc=lambda: '–ü—Ä–µ—Ñ—ñ–∫—Å, —è–∫–∏–π –¥–æ–¥–∞–≤–∞—Ç–∏–º–µ—Ç—å—Å—è –¥–æ –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ –ø—ñ–¥ —á–∞—Å –≤—Ö–æ–¥—É –¥–æ –ê–§–ö'
			),
			loader.ConfigValue(
				"afk_text",
				"üîÖ <b>–ù–∞—Ä–∞–∑—ñ —è –Ω–µ –≤ –º–µ—Ä–µ–∂—ñ</b>\nüì° –ú—ñ–π –∑–≤'—è–∑–æ–∫ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –∞–ª–µ –∫–æ–∂–Ω–µ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ —É–≤–∞–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ —Ç–∞ –æ—Ç—Ä–∏–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–≥–æ–¥–æ–º.\n\n‚ú® –ó–∞–ø—Ä–æ—à—É—é —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –º–æ–º–µ–Ω—Ç–æ–º —ñ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –¥–ª—è —Å–µ–±–µ –º–æ—é —Ç–≤–æ—Ä—á—ñ—Å—Ç—å: –ø–æ–µ–∑—ñ—é, –º—É–∑–∏–∫—É —Ç–∞ –∞–≤—Ç–æ—Ä—Å—å–∫—ñ –ø—Ä–æ—î–∫—Ç–∏.\n(–ö–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —à–≤–∏–¥–∫–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Ä–æ–∑–¥—ñ–ª—ñ–≤)\n\n{reason_text}",
				doc=lambda: self.strings("custom_text__afk_text"),
			),
			loader.ConfigValue(
				"work_text",
				"üíº <b>–ü—Ä–∞—Ü—é—é –Ω–∞–¥ –≤–∞–∂–ª–∏–≤–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏</b>\n‚öôÔ∏è –†–æ–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å —Ç—Ä–∏–≤–∞—î –≤–∂–µ <code>{time}</code>, —ñ —è –∑–æ—Å–µ—Ä–µ–¥–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ —Ç–∞ –≤–∞–∂–ª–∏–≤–æ–≥–æ.\n\nüìå –ü—Ä–æ–ø–æ–Ω—É—é —É —Ü–µ–π —á–∞—Å –≤—ñ–¥–∫—Ä–∏—Ç–∏ –¥–ª—è —Å–µ–±–µ –º–æ—ó —Ç–≤–æ—Ä—á—ñ —Ä–µ—Å—É—Ä—Å–∏ ‚Äî –≤—ñ—Ä—à—ñ, –º—É–∑–∏—á–Ω—ñ —Ç–≤–æ—Ä–∏ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—é –º–æ–≥–æ —à–ª—è—Ö—É.\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è –æ—Ç—Ä–∏–º–∞—é –π –≤—ñ–¥–ø–æ–≤—ñ–º, —â–æ–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Ä–æ–±–æ—Ç–∞.",
				doc=lambda: self.strings("work_text__text"),
			),
			loader.ConfigValue(
				"sleep_text",
				"üò¥ <b>–í—ñ–¥–ø–æ—á–∏–≤–∞—é</b>\nüí§ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –æ—Ç—Ä–∏–º–∞–Ω–µ —Ç–∞ —É–≤–∞–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–µ, –∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ–π–¥–µ –ø—ñ—Å–ª—è –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è.\n\n‚ú® –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ü–µ–π —á–∞—Å —ñ–∑ –∫–æ—Ä–∏—Å—Ç—é ‚Äî –æ–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ –º–æ—î—é –ø–æ–µ–∑—ñ—î—é, –º—É–∑–∏–∫–æ—é —Ç–∞ —Ç–≤–æ—Ä—á–∏–º–∏ –ø—Ä–æ—î–∫—Ç–∞–º–∏.\n–ö–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –≤—ñ–¥–∫—Ä–∏—é—Ç—å –¥–ª—è –≤–∞—Å —É—Å—ñ —Ä–æ–∑–¥—ñ–ª–∏.",
				doc=lambda: "–¢–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É —Å–Ω—É",
			),
			loader.ConfigValue(
				"ignore_chats",
				[],
				lambda: "–ß–∞—Ç–∏, —É —è–∫–∏—Ö myAfk –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞—Ç–∏–º–µ",
				validator=loader.validators.Series(
                    validator=loader.validators.Union(
                        loader.validators.TelegramID(),
                        loader.validators.RegExp("[0-9]"),
                    ),
                ),
			),
			loader.ConfigValue(
				"button",
				True,
				doc=lambda: self.strings("button__text"),
				validator=loader.validators.Boolean(),
			),
			loader.ConfigValue(
				"auto_sleep",
				True,
				doc=lambda: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É —Å–Ω—É –æ 22:00 —Ç–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è –æ 8:00",
				validator=loader.validators.Boolean(),
			),
		)

	def _get_main_buttons(self):
		"""–ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å–Ω–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
		return [
			[
				{
					"text": "‚úçÔ∏è –ü—Ä–æ –ê–≤—Ç–æ—Ä–∞", 
					"url": "https://authorche.top"
				},
				{
					"text": "üíù –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏",
					"url": "https://authorche.top/donate"
				}
			]
		]

	def _afk_custom_text(self, reason=None) -> str:
		if reason:
			reason_text = f"üìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> <i>{reason}</i>"
		else:
			reason_text = ""

		return self.config["afk_text"].format(
			reason_text=reason_text
		)

	def _work_custom_text(self) -> str:
		now = datetime.datetime.now().replace(microsecond=0)
		work_start = datetime.datetime.fromtimestamp(
			self._db.get(__name__, "work_start")
		).replace(microsecond=0)

		time_diff = now - work_start

		return self.config["work_text"].format(
			time=time_diff
		)

	def _sleep_text(self) -> str:
		return self.config["sleep_text"]

	async def _auto_sleep_manager(self):
		"""–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–µ–∂–∏–º–æ–º —Å–Ω—É"""
		while True:
			if not self.config.get("auto_sleep", True):
				await asyncio.sleep(3600)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
				continue
				
			now = datetime.datetime.now()
			# –ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å
			hour = now.hour
			
			is_sleep_time = hour >= 22 or hour < 8
			is_afk = self._db.get(__name__, "afk", False)
			is_sleep_mode = self._db.get(__name__, "sleep_mode", False)
			
			if is_sleep_time and not is_afk:
				# –ß–∞—Å —Å–ø–∞—Ç–∏ - –≤–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º —Å–Ω—É
				self._db.set(__name__, "afk", True)
				self._db.set(__name__, "sleep_mode", True)
				self._db.set(__name__, "gone", time.time())
				self._db.set(__name__, "ratelimit", [])
				
				if self._db.get(__name__, "change_name", True):
					prefix = self.config['prefix']
					current_name = (await self._client.get_me()).last_name or ""
					if not current_name.endswith(prefix):
						new_name = current_name + prefix
						await self._client(UpdateProfileRequest(last_name=new_name))
				
			elif not is_sleep_time and is_sleep_mode:
				# –ß–∞—Å –ø—Ä–æ–∫–∏–¥–∞—Ç–∏—Å—è - –≤–∏–º–∏–∫–∞—î–º–æ —Ä–µ–∂–∏–º —Å–Ω—É
				self._db.set(__name__, "afk", False)
				self._db.set(__name__, "sleep_mode", False)
				self._db.set(__name__, "gone", None)
				self._db.set(__name__, "ratelimit", [])
				
				if self._db.get(__name__, "change_name", True):
					prefix = self.config['prefix']
					current_name = (await self._client.get_me()).last_name or ""
					if current_name.endswith(prefix):
						new_name = current_name[:-len(prefix)]
						await self._client(UpdateProfileRequest(last_name=new_name))
			
			await asyncio.sleep(1800)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω

	@loader.command()
	async def afkconfig(self, message):
		"""- –≤—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—è"""
		
		await self.inline.form(
			message=message, 
			text='<b>‚öôÔ∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>', 
			reply_markup=[{'text': 'üî¥ –í—ñ–¥–∫—Ä–∏—Ç–∏', 'callback': self.settings}]
		)

	@loader.command()
	async def afk(self, message):
		"""[–ø—Ä–∏—á–∏–Ω–∞] - —É–≤—ñ–π—Ç–∏ –¥–æ offline —Ä–µ–∂–∏–º—É"""
		args = utils.get_args_raw(message)
		reason = args if args else None
		
		self._db.set(__name__, "afk", True)
		self._db.set(__name__, "gone", time.time())
		self._db.set(__name__, "ratelimit", [])
		self._db.set(__name__, "afk_reason", reason)
		self._db.set(__name__, "sleep_mode", False)  # –¶–µ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å–æ–Ω
		
		change_name = self._db.get(__name__, "change_name", True)

		if change_name:
			prefix = self.config['prefix']
			current_name = (await self._client.get_me()).last_name or ""
			if not current_name.endswith(prefix):
				new_name = current_name + prefix
				await message.client(UpdateProfileRequest(last_name=new_name))

		reason_display = f" –∑ –ø—Ä–∏—á–∏–Ω–æ—é: <i>{reason}</i>" if reason else ""
		await utils.answer(
			message, 
			f'üåô <b>Offline</b> —Ä–µ–∂–∏–º —É—Å–ø—ñ—à–Ω–æ <b>—É–≤—ñ–º–∫–Ω–µ–Ω–æ</b>{reason_display}!\n\n'
			f'‚ú® <i>–¢–µ–ø–µ—Ä –ª—é–¥–∏ –∑–º–æ–∂—É—Ç—å –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –≤–∞—à—ñ –≤—ñ—Ä—à—ñ —Ç–∞ –º—É–∑–∏–∫—É!</i>'
		)

	@loader.command()
	async def work(self, message):
		"""- —É–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ —Ä–æ–±–æ—á–∏–π —Å—Ç–∞—Ç—É—Å"""
		is_working = self._db.get(__name__, "work", False)
		
		if is_working:
			# –í–∏–º–∏–∫–∞—î–º–æ —Ä–æ–±–æ—á–∏–π —Å—Ç–∞—Ç—É—Å
			self._db.set(__name__, "work", False)
			self._db.set(__name__, "work_start", None)
			self._db.set(__name__, "ratelimit", [])
			
			change_name = self._db.get(__name__, "change_name", True)
			if change_name:
				prefix = self.config['prefix']
				current_name = (await self._client.get_me()).last_name or ""
				if current_name.endswith(prefix):
					new_name = current_name[:-len(prefix)]
					await message.client(UpdateProfileRequest(last_name=new_name))
			
			await utils.answer(message, 'üíº <b>–†–æ–±–æ—á–∏–π —Å—Ç–∞—Ç—É—Å</b> —É—Å–ø—ñ—à–Ω–æ <b>–≤–∏–º–∫–Ω–µ–Ω–æ</b>! –í—ñ–ª—å–Ω–∏–π —á–∞—Å ‚ú®')
		else:
			# –í–º–∏–∫–∞—î–º–æ —Ä–æ–±–æ—á–∏–π —Å—Ç–∞—Ç—É—Å
			self._db.set(__name__, "work", True)
			self._db.set(__name__, "work_start", time.time())
			self._db.set(__name__, "ratelimit", [])
			
			change_name = self._db.get(__name__, "change_name", True)
			if change_name:
				prefix = self.config['prefix']
				current_name = (await self._client.get_me()).last_name or ""
				if not current_name.endswith(prefix):
					new_name = current_name + prefix
					await message.client(UpdateProfileRequest(last_name=new_name))
			
			await utils.answer(message, 'üíº <b>–†–æ–±–æ—á–∏–π —Å—Ç–∞—Ç—É—Å</b> —É—Å–ø—ñ—à–Ω–æ <b>—É–≤—ñ–º–∫–Ω–µ–Ω–æ</b>!')

	@loader.command()
	async def unafk(self, message):
		"""- –≤–∏–π—Ç–∏ –∑ offline —Ä–µ–∂–∏–º—É"""

		self._db.set(__name__, "afk", False)
		self._db.set(__name__, "work", False)
		self._db.set(__name__, "gone", None)
		self._db.set(__name__, "work_start", None)
		self._db.set(__name__, "ratelimit", [])
		self._db.set(__name__, "sleep_mode", False)
		
		change_name = self._db.get(__name__, "change_name", True)

		if change_name:
			prefix = self.config['prefix']
			current_name = (await self._client.get_me()).last_name or ""
			if current_name.endswith(prefix):
				new_name = current_name[:-len(prefix)]
				await message.client(UpdateProfileRequest(last_name=new_name))
		
		await utils.answer(message, 'üåü <b>Offline —Ä–µ–∂–∏–º</b> —É—Å–ø—ñ—à–Ω–æ <b>–≤–∏–º–∫–Ω–µ–Ω–æ</b>! –ó–Ω–æ–≤—É –Ω–∞ –∑–≤\'—è–∑–∫—É ‚ú®')
		await self.allmodules.log("MyAfk now stopped.")

	def _get_reply_markup(self, is_work=False, is_sleep=False):
		"""–ì–µ–Ω–µ—Ä—É—î reply markup –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–µ–∂–∏–º—É"""
		main_buttons = self._get_main_buttons()
		
		if self.config["button"]:
			if is_work:
				control_button = {
					"text": "üíº –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å", 
					"callback": self.button_cancel_work,
				}
			else:
				control_button = {
					"text": "üåü –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –æ–Ω–ª–∞–π–Ω", 
					"callback": self.button_cancel,
				}
			
			return [
				[control_button]
			] + main_buttons
		else:
			return main_buttons

	@loader.watcher()
	async def watcher(self, message):
		if not isinstance(message, types.Message):
			return
		if utils.get_chat_id(message) in self.config['ignore_chats']: 
			return
		if message.mentioned or getattr(message.to_id, "user_id", None) == self._me.id:
			afk_state = self._db.get(__name__, "afk", False)
			work_state = self._db.get(__name__, "work", False)
			
			if not afk_state and not work_state:
				return
				
			logger.debug("tagged!")
			ratelimit = self._db.get(__name__, "ratelimit", [])
			if utils.get_chat_id(message) in ratelimit:
				return
			else:
				self._db.setdefault(__name__, {}).setdefault("ratelimit", []).append(
					utils.get_chat_id(message)
				)
				self._db.save()
			
			user = await utils.get_user(message)
			if user.is_self or user.bot or user.verified:
				logger.debug("User is self, bot or verified.")
				return
			
			# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ç–µ–∫—Å—Ç
			is_sleep = self._db.get(__name__, "sleep_mode", False)
			
			if work_state:
				text = self._work_custom_text()
				reply_markup = self._get_reply_markup(is_work=True)
			elif is_sleep:
				text = self._sleep_text()
				reply_markup = self._get_reply_markup(is_sleep=True)
			else:
				reason = self._db.get(__name__, "afk_reason")
				text = self._afk_custom_text(reason)
				reply_markup = self._get_reply_markup()
			
			await self.inline.form(
				message=message, 
				text=text,
				reply_markup=reply_markup,
				silent=True
			)

	async def button_cancel(self, call: InlineCall):
		self._db.set(__name__, "afk", False)
		self._db.set(__name__, "gone", None)
		self._db.set(__name__, "ratelimit", [])
		self._db.set(__name__, "sleep_mode", False)
		
		change_name = self._db.get(__name__, "change_name", True)
		await self.allmodules.log("myAF–ö now not working.")

		if change_name:
			prefix = self.config['prefix']
			current_name = (await self._client.get_me()).last_name or ""
			if current_name.endswith(prefix):
				new_name = current_name[:-len(prefix)]
				await self._client(UpdateProfileRequest(last_name=new_name))

		await call.edit(self.strings["bt_off_afk"])

	async def button_cancel_work(self, call: InlineCall):
		self._db.set(__name__, "work", False)
		self._db.set(__name__, "work_start", None)
		self._db.set(__name__, "ratelimit", [])
		
		change_name = self._db.get(__name__, "change_name", True)
		await self.allmodules.log("myAF–ö work mode stopped.")

		if change_name:
			prefix = self.config['prefix']
			current_name = (await self._client.get_me()).last_name or ""
			if current_name.endswith(prefix):
				new_name = current_name[:-len(prefix)]
				await self._client(UpdateProfileRequest(last_name=new_name))

		await call.edit(self.strings["bt_off_work"])

	async def settings(self, call: InlineCall):
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': 'üìù –ü—Ä–µ—Ñ—ñ–∫—Å',
						'callback': self.settings_name
					},
					{
						'text': 'üåô –ê–≤—Ç–æ-—Å–æ–Ω',
						'callback': self.settings_auto_sleep
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä–∏—Ç–∏",
						"action": 'close'
					}
				]
			]
		)

	async def settings_auto_sleep(self, call: InlineCall):
		auto_sleep = self._db.get(__name__, 'auto_sleep', True)
		status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ" if auto_sleep else "–≤–∏–º–∫–Ω–µ–Ω–æ üö´"
		
		await call.edit(
			text=(
				f'üåô <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–µ–∂–∏–º —Å–Ω—É</b>\n\n'
				f'üìä <b>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status}\n\n'
				f'‚è∞ <b>–ß–∞—Å —Ä–æ–±–æ—Ç–∏:</b> 22:00 - 8:00 (–ö–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å)\n'
				f'üí§ –ü—Ä–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—ñ –º–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ —Ä–µ–∂–∏–º —Å–Ω—É –≤–Ω–æ—á—ñ\n\n'
				f'‚ùî <b>–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è?</b>'
			),
			reply_markup=[
				[
					{
						'text': '‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏',
						"callback": self.auto_sleep_on
					},
					{
						"text": 'üö´ –í–∏–º–∫–Ω—É—Ç–∏',
						"callback": self.auto_sleep_off
					}
				],
				[{'text': '‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'callback': self.settings}]
			]
		)

	async def auto_sleep_on(self, call: InlineCall):
		self._db.set(__name__, 'auto_sleep', True)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': 'üìù –ü—Ä–µ—Ñ—ñ–∫—Å',
						'callback': self.settings_name
					},
					{
						'text': 'üåô –ê–≤—Ç–æ-—Å–æ–Ω',
						'callback': self.settings_auto_sleep
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä–∏—Ç–∏",
						"action": 'close'
					}
				]
			]
		)

	async def auto_sleep_off(self, call: InlineCall):
		self._db.set(__name__, 'auto_sleep', False)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': 'üìù –ü—Ä–µ—Ñ—ñ–∫—Å',
						'callback': self.settings_name
					},
					{
						'text': 'üåô –ê–≤—Ç–æ-—Å–æ–Ω',
						'callback': self.settings_auto_sleep
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä–∏—Ç–∏",
						"action": 'close'
					}
				]
			]
		)

	async def settings_name(self, call: InlineCall):
		change_name = self._db.get(__name__, 'change_name', True)
		status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ ‚úÖ" if change_name else "–≤–∏–º–∫–Ω–µ–Ω–æ üö´"
		
		await call.edit(
			text=(
				f'üìù <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–µ—Ñ—ñ–∫—Å–∞</b>\n\n'
				f'üìä <b>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status}\n'
				f'üè∑Ô∏è <b>–ü—Ä–µ—Ñ—ñ–∫—Å:</b> <code>{self.config["prefix"]}</code>\n\n'
				f'‚ÑπÔ∏è –ü—Ä–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—ñ –ø—Ä–µ—Ñ—ñ–∫—Å <b>–¥–æ–¥–∞—î—Ç—å—Å—è</b> –¥–æ –∫—ñ–Ω—Ü—è –≤–∞—à–æ–≥–æ –Ω—ñ–∫—É\n'
				f'‚ö†Ô∏è –ü—Ä–∏ –≤–∏–º–∫–Ω–µ–Ω–Ω—ñ - –Ω—ñ–∫ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω\n\n'
				f'‚ùî <b>–ë–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è?</b>'
			),
			reply_markup=[
				[
					{
						'text': '‚úÖ –£–≤—ñ–º–∫–Ω—É—Ç–∏',
						"callback": self.name_yes
					},
					{
						"text": 'üö´ –í–∏–º–∫–Ω—É—Ç–∏',
						"callback": self.name_no
					}
				],
				[{'text': '‚Ü©Ô∏è –ù–∞–∑–∞–¥', 'callback': self.settings}]
			]
		)

	async def name_yes(self, call: InlineCall):
		self._db.set(__name__, 'change_name', True)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': 'üìù –ü—Ä–µ—Ñ—ñ–∫—Å',
						'callback': self.settings_name
					},
					{
						'text': 'üåô –ê–≤—Ç–æ-—Å–æ–Ω',
						'callback': self.settings_auto_sleep
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä–∏—Ç–∏",
						"action": 'close'
					}
				]
			]
		)

	async def name_no(self, call: InlineCall):
		self._db.set(__name__, 'change_name', False)
		info = self.render_settings()
		await call.edit(
			text=info,
			reply_markup=[
				[
					{
						'text': 'üìù –ü—Ä–µ—Ñ—ñ–∫—Å',
						'callback': self.settings_name
					},
					{
						'text': 'üåô –ê–≤—Ç–æ-—Å–æ–Ω',
						'callback': self.settings_auto_sleep
					}
				],
				[
					{
						"text": "üö´ –ó–∞–∫—Ä–∏—Ç–∏",
						"action": 'close'
					}
				]
			]
		)

	def get_afk(self):
		return self._db.get(__name__, "afk", False) or self._db.get(__name__, "work", False)